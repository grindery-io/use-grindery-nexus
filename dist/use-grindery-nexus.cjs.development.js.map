{"version":3,"file":"use-grindery-nexus.cjs.development.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from 'react';\n// @ts-ignore\nimport Web3Modal from 'web3modal';\n// @ts-ignore\nimport * as ethersLib from 'ethers';\n// @ts-ignore\nimport { encode } from 'universal-base64url';\n// @ts-ignore\nimport * as fcl from '@onflow/fcl';\n\nexport const ENGINE_URL = 'https://orchestrator.grindery.org';\n\ndeclare global {\n  interface Window {\n    nexus_auth: any;\n  }\n}\n\n// Flow authentication account proof data type\ntype AccountProofData = {\n  // e.g. \"Awesome App (v0.0)\" - A human readable string to identify your application during signing\n  appIdentifier: string;\n\n  // e.g. \"75f8587e5bd5f9dcc9909d0dae1f0ac5814458b2ae129620502cb936fde7120a\" - minimum 32-byte random nonce as hex string\n  nonce: string;\n};\n\n// Flow auth account proof data resolver type\ntype AccountProofDataResolver = () => Promise<AccountProofData | null>;\n\n// Flow auth config\nfcl.config({\n  'flow.network': 'mainnet',\n  'discovery.wallet': 'https://fcl-discovery.onflow.org/authn',\n  'app.detail.title': 'Grindery Nexus',\n  'app.detail.icon':\n    'https://nexus.grindery.org/static/media/nexus-square.7402bdeb27ab56504250ca409fac38bd.svg',\n});\n\n// Authentication token object definition\nexport type AuthToken = {\n  access_token: string;\n  expires_in: number;\n  refresh_token: string;\n  token_type: string;\n};\n\n// Flow user type\ntype FlowUser = {\n  addr: string;\n  services?: any[];\n};\n\n// Context properties definition\nexport type GrinderyNexusContextProps = {\n  /** User ID. Reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md */\n  user: string | null;\n\n  /** Authentication token object */\n  token: AuthToken | null;\n\n  /** User wallet address  */\n  address: string | null;\n\n  /** User chain id  */\n  chain: number | string | null;\n\n  /** Authorization code */\n  code: string | null;\n\n  /** Flow user object */\n  flowUser: FlowUser;\n\n  /** Ethers provider */\n  provider: any;\n\n  /** Ethers */\n  ethers: any;\n\n  /** Connect user wallet */\n  connect: () => void;\n\n  /** Disconnect user wallet */\n  disconnect: () => void;\n\n  /** Set User ID  */\n  setUser: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user wallet address  */\n  setAddress: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user chain id  */\n  setChain: React.Dispatch<React.SetStateAction<number | string | null>>;\n\n  /** Connect flow user */\n  connectFlow: () => void;\n};\n\nexport type GrinderyNexusContextProviderProps = {\n  children: React.ReactNode;\n\n  /** Automatically authenticate user */\n  cacheProvider?: boolean;\n};\n\n// Default context properties\nconst defaultContext = {\n  user: null,\n  address: null,\n  chain: null,\n  token: null,\n  code: null,\n  flowUser: { addr: '' },\n  provider: null,\n  ethers: null,\n  connect: () => {},\n  disconnect: () => {},\n  setUser: () => {},\n  setAddress: () => {},\n  setChain: () => {},\n  connectFlow: () => {},\n};\n\n/** Grindery Nexus Context */\nexport const GrinderyNexusContext = createContext<GrinderyNexusContextProps>(\n  defaultContext\n);\n\n/** Grindery Nexus Context Provider */\nexport const GrinderyNexusContextProvider = (\n  props: GrinderyNexusContextProviderProps\n) => {\n  const children = props.children;\n  const cacheProvider =\n    typeof props.cacheProvider !== 'undefined' ? props.cacheProvider : true;\n\n  // Web3Modal instance\n  const [web3Modal, setWeb3Modal] = useState<any>(null);\n\n  // Web3Provider library\n  const [library, setLibrary] = useState<any>(null);\n\n  // User account\n  const [account, setAccount] = useState<string | null>(null);\n\n  // User id\n  const [user, setUser] = useState<string | null>(null);\n\n  // User wallet address\n  const [address, setAddress] = useState<string | null>(null);\n\n  // User chain id\n  const [chain, setChain] = useState<number | string | null>(null);\n\n  // Auth message\n  const [message, setMessage] = useState<string | null>(null);\n\n  // Authentication token object\n  const [token, setToken] = useState<AuthToken | null>(null);\n\n  // Signed authentication message\n  const [signature, setSignature] = useState<string | null>(null);\n\n  // Flow chain user\n  const [flowUser, setFlowUser] = useState<FlowUser>({ addr: '' });\n\n  // Is Flow account resolver called\n  const [resolverCalled, setResolverCalled] = useState(false);\n\n  const provider = library;\n\n  const ethers = ethersLib;\n\n  const flowProof =\n    flowUser &&\n    flowUser.addr &&\n    flowUser.services?.find(service => service.type === 'account-proof');\n\n  // Compiled authorization code\n  const code =\n    (message &&\n      signature &&\n      encode(\n        JSON.stringify({\n          message: message,\n          signature: signature,\n        })\n      )) ||\n    (flowProof &&\n      flowProof.data &&\n      flowProof.data.nonce &&\n      flowProof.data.signatures &&\n      flowProof.data.signatures.length > 0 &&\n      flowProof.data.address &&\n      resolverCalled &&\n      encode(\n        JSON.stringify({\n          type: 'flow',\n          address: flowProof.data.address,\n          nonce: flowProof.data.nonce,\n          signatures: flowProof.data.signatures,\n        })\n      )) ||\n    null;\n\n  // Subscribe to account change\n  const addListeners = async (web3ModalProvider: any) => {\n    web3ModalProvider.on('accountsChanged', () => {\n      window.location.reload();\n    });\n\n    web3ModalProvider.on('disconnect', async () => {\n      await web3Modal.clearCachedProvider();\n      disconnect();\n    });\n  };\n\n  // Connect MetaMask wallet\n  const connect = async () => {\n    const provider = await web3Modal.connect();\n    addListeners(provider);\n    const ethersProvider = new ethersLib.providers.Web3Provider(provider);\n    const userAddress = await ethersProvider.getSigner().getAddress();\n    //const userChain = await ethersProvider.getSigner().getChainId();\n    const accounts = await ethersProvider.listAccounts();\n    setLibrary(ethersProvider);\n    if (accounts) setAccount(accounts[0]);\n    setAddress(userAddress);\n    // For EVM wallet always set Ethereum chain\n    setChain('eip155:1');\n  };\n\n  // Connect with Flow wallet\n  const connectFlow = () => {\n    fcl.authenticate();\n  };\n\n  // Clear user state\n  const clearUserState = () => {\n    setUser(null);\n    setAddress(null);\n    setChain(null);\n    setAccount(null);\n    setMessage(null);\n    setToken(null);\n    setSignature(null);\n    setFlowUser({ addr: '' });\n  };\n\n  // Disconnect user\n  const disconnect = async () => {\n    await web3Modal.clearCachedProvider();\n    if (flowUser && flowUser.addr) {\n      fcl.unauthenticate();\n    }\n    clearUserState();\n    clearAuthSession();\n  };\n\n  // Fetch authentication message or access token from the engine API\n  const startSession = async (userAddress: string) => {\n    // Try to fetch access token\n    const resWithCreds = await fetch(\n      `${ENGINE_URL}/oauth/session?address=${userAddress}`,\n      {\n        method: 'GET',\n        credentials: 'include',\n      }\n    );\n    if (resWithCreds && resWithCreds.ok) {\n      let json = await resWithCreds.json();\n\n      // Set access token if exists\n      if (json.access_token) {\n        setToken(json);\n      } else if (json.message) {\n        // Or set auth message\n        setMessage(json.message);\n      }\n    } else {\n      console.error(\n        'startSessionWithCreds error',\n        (resWithCreds && resWithCreds.status) || 'Unknown error'\n      );\n    }\n  };\n\n  // Sign authentication message with MetaMask\n  const signMessage = async (lib: any, msg: string, userAccount: string) => {\n    if (!web3Modal) return;\n    try {\n      const newSignature = await lib.provider.request({\n        method: 'personal_sign',\n        params: [msg, userAccount],\n      });\n      setSignature(newSignature);\n    } catch (error) {\n      console.error('signMessage error', error);\n      clearUserState();\n    }\n  };\n\n  // Get access token from the engine API\n  const getToken = async (code: string) => {\n    const res = await fetch(`${ENGINE_URL}/oauth/token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        grant_type: 'authorization_code',\n        code: code,\n      }),\n    });\n\n    if (res.ok) {\n      let result = await res.json();\n      // Set address and chain if Flow user proofed\n      if (flowProof) {\n        setAddress((flowUser && flowUser.addr) || null);\n        setChain('flow:mainnet');\n      }\n      setToken(result);\n    } else {\n      console.error('getToken error', res.status);\n      // handle expried nonce for Flow user\n      if (flowProof) {\n        try {\n          await disconnect();\n        } catch (err) {\n          //\n        }\n        fcl.authenticate();\n      } else {\n        clearUserState();\n        disconnect();\n      }\n    }\n  };\n\n  // Set refresh_token cookie\n  const registerAuthSession = async (refresh_token: string) => {\n    const res = await fetch(`${ENGINE_URL}/oauth/session-register`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        refresh_token: refresh_token,\n      }),\n    });\n\n    if (!res.ok) {\n      console.error('registerAuthSession error', res.status);\n    }\n  };\n\n  // Remove refresh_token cookie\n  const clearAuthSession = async () => {\n    const res = await fetch(`${ENGINE_URL}/oauth/session-register`, {\n      method: 'POST',\n      credentials: 'include',\n    });\n\n    if (!res.ok) {\n      console.error('clearAuthSession error', res.status);\n    }\n  };\n\n  // Flow auth account proof data resolver\n  const accountProofDataResolver: AccountProofDataResolver = async () => {\n    setResolverCalled(true);\n\n    const res = await fetch(`${ENGINE_URL}/oauth/flow/session`, {\n      method: 'GET',\n      credentials: 'include',\n    });\n\n    if (res && res.ok) {\n      let json = await res.json();\n\n      // Return nonce on success\n      if (json.nonce) {\n        return {\n          appIdentifier: 'Grindery Nexus',\n          nonce: json.nonce,\n        };\n      } else {\n        throw new Error('get nonce failed');\n      }\n    } else {\n      console.error(\n        'getFlowNonce error',\n        (res && res.status) || 'Unknown error'\n      );\n      throw new Error('get nonce failed');\n    }\n  };\n\n  const restoreFlowSession = async (address: string) => {\n    const res = await fetch(\n      `${ENGINE_URL}/oauth/flow/session?address=${address}`,\n      {\n        method: 'GET',\n        credentials: 'include',\n      }\n    );\n\n    if (res && res.ok) {\n      let json = await res.json();\n\n      // Return nonce on success\n      if (json.access_token) {\n        setToken(json);\n        setAddress(address);\n        setChain('flow:mainnet');\n      } else {\n        throw new Error('flow user session failed');\n      }\n    } else {\n      console.error(\n        'flow user session failed',\n        (res && res.status) || 'Unknown error'\n      );\n      throw new Error('flow user session failed');\n    }\n  };\n\n  useEffect(() => {\n    fcl.config().put('fcl.accountProof.resolver', accountProofDataResolver);\n  }, []);\n\n  // Set web3Modal instance\n  useEffect(() => {\n    const providerOptions = {};\n    const newWeb3Modal = new Web3Modal({\n      cacheProvider: cacheProvider,\n      network: 'mainnet',\n      providerOptions,\n    });\n    setWeb3Modal(newWeb3Modal);\n  }, []);\n\n  // connect automatically and without a popup if user was connected before\n  useEffect(() => {\n    if (web3Modal && web3Modal.cachedProvider) {\n      connect();\n    }\n  }, [web3Modal]);\n\n  // set user if token and address is known\n  useEffect(() => {\n    if (address && token && token.access_token && chain) {\n      setUser(`${chain}:${address}`);\n      if (token.refresh_token) {\n        registerAuthSession(token.refresh_token);\n      }\n    } else {\n      setUser(null);\n    }\n  }, [token, address, chain]);\n\n  // Start session if user address is known\n  useEffect(() => {\n    if (address && !message && !signature && !token) {\n      startSession(address);\n    }\n  }, [address, message, signature, token]);\n\n  // Sign authentication message if message is known\n  useEffect(() => {\n    if (library && message && account && !signature && !token) {\n      signMessage(library, message, account);\n    }\n  }, [library, message, account, signature, token]);\n\n  // Get authentication token if message is signed\n  useEffect(() => {\n    if (code && !token) {\n      getToken(code);\n    }\n  }, [code, token]);\n\n  // subscribe to flow user update\n  useEffect(() => {\n    fcl.currentUser.subscribe(setFlowUser);\n  }, []);\n\n  // Restore Flow user session if user available without resolver\n  useEffect(() => {\n    if (flowUser && flowUser.addr && !resolverCalled) {\n      restoreFlowSession(flowUser.addr);\n    }\n  }, [flowUser, resolverCalled]);\n\n  useEffect(() => {\n    window.nexus_auth = {\n      user,\n      address,\n      chain,\n      message,\n      token,\n      flowUser,\n    };\n  }, [user, address, chain, message, token, flowUser]);\n\n  return (\n    <GrinderyNexusContext.Provider\n      value={{\n        user,\n        address,\n        chain,\n        token,\n        code,\n        flowUser,\n        provider,\n        ethers,\n        connect,\n        disconnect,\n        setUser,\n        setAddress,\n        setChain,\n        connectFlow,\n      }}\n    >\n      {children}\n    </GrinderyNexusContext.Provider>\n  );\n};\n\n/** Grindery Nexus Hook */\nexport const useGrinderyNexus = () => useContext(GrinderyNexusContext);\n\nexport default GrinderyNexusContextProvider;\n"],"names":["ENGINE_URL","fcl","defaultContext","user","address","chain","token","code","flowUser","addr","provider","ethers","connect","disconnect","setUser","setAddress","setChain","connectFlow","GrinderyNexusContext","createContext","GrinderyNexusContextProvider","props","children","cacheProvider","useState","web3Modal","setWeb3Modal","library","setLibrary","account","setAccount","message","setMessage","setToken","signature","setSignature","setFlowUser","resolverCalled","setResolverCalled","ethersLib","flowProof","services","find","service","type","encode","JSON","stringify","data","nonce","signatures","length","addListeners","web3ModalProvider","on","window","location","reload","clearCachedProvider","ethersProvider","Web3Provider","getSigner","getAddress","userAddress","listAccounts","accounts","clearUserState","clearAuthSession","startSession","fetch","method","credentials","resWithCreds","ok","json","access_token","console","error","status","signMessage","lib","msg","userAccount","request","params","newSignature","getToken","headers","body","grant_type","res","result","registerAuthSession","refresh_token","accountProofDataResolver","appIdentifier","Error","restoreFlowSession","useEffect","put","providerOptions","newWeb3Modal","Web3Modal","network","cachedProvider","subscribe","nexus_auth","React","Provider","value","useGrinderyNexus","useContext"],"mappings":"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"}