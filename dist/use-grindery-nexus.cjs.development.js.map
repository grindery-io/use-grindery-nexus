{"version":3,"file":"use-grindery-nexus.cjs.development.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from 'react';\n// @ts-ignore\nimport Web3Modal from 'web3modal';\n// @ts-ignore\nimport { providers } from 'ethers';\n\nexport const ENGINE_URL = 'https://orchestrator.grindery.org';\n\n// Authentication token object definition\nexport type AuthToken = {\n  access_token: string;\n  expires_in: number;\n  refresh_token: string;\n  token_type: string;\n};\n\n// Context properties definition\nexport type GrinderyNexusContextProps = {\n  /** User ID. Reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md */\n  user: string | null;\n\n  /** Authentication token object */\n  token: AuthToken | null;\n\n  /** User wallet address  */\n  address: string | null;\n\n  /** User chain id  */\n  chain: number | null;\n\n  /** Authentication message */\n  message: string | null;\n\n  /** Signed authentication message */\n  signature: string | null;\n\n  /** Connect user wallet */\n  connect: () => void;\n\n  /** Disconnect user wallet */\n  disconnect: () => void;\n\n  /** Set User ID  */\n  setUser: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user wallet address  */\n  setAddress: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user chain id  */\n  setChain: React.Dispatch<React.SetStateAction<number | null>>;\n};\n\nexport type GrinderyNexusContextProviderProps = {\n  children: React.ReactNode;\n\n  /** Automatically authenticate user */\n  cacheProvider?: boolean;\n};\n\n// Default context properties\nconst defaultContext = {\n  user: null,\n  address: null,\n  chain: null,\n  token: null,\n  message: null,\n  signature: null,\n  connect: () => {},\n  disconnect: () => {},\n  setUser: () => {},\n  setAddress: () => {},\n  setChain: () => {},\n};\n\n/** Grindery Nexus Context */\nexport const GrinderyNexusContext = createContext<GrinderyNexusContextProps>(\n  defaultContext\n);\n\n/** Grindery Nexus Context Provider */\nexport const GrinderyNexusContextProvider = (\n  props: GrinderyNexusContextProviderProps\n) => {\n  const children = props.children;\n  const cacheProvider =\n    typeof props.cacheProvider !== 'undefined' ? props.cacheProvider : true;\n\n  // Web3Modal instance\n  const [web3Modal, setWeb3Modal] = useState<any>(null);\n\n  // Web3Provider library\n  const [library, setLibrary] = useState<any>(null);\n\n  // User account\n  const [account, setAccount] = useState<string | null>(null);\n\n  // User id\n  const [user, setUser] = useState<string | null>(null);\n\n  // User wallet address\n  const [address, setAddress] = useState<string | null>(null);\n\n  // User chain id\n  const [chain, setChain] = useState<number | null>(null);\n\n  // Auth message\n  const [message, setMessage] = useState<string | null>(null);\n\n  // Authentication token object\n  const [token, setToken] = useState<AuthToken | null>(null);\n\n  // Signed authentication message\n  const [signature, setSignature] = useState<string | null>(null);\n\n  // Subscribe to account change\n  const addListeners = async (web3ModalProvider: any) => {\n    web3ModalProvider.on('accountsChanged', () => {\n      window.location.reload();\n    });\n  };\n\n  // Connect MetaMask wallet\n  const connect = async () => {\n    const provider = await web3Modal.connect();\n    addListeners(provider);\n    const ethersProvider = new providers.Web3Provider(provider);\n    const userAddress = await ethersProvider.getSigner().getAddress();\n    const userChain = await ethersProvider.getSigner().getChainId();\n    const accounts = await ethersProvider.listAccounts();\n    setLibrary(ethersProvider);\n    if (accounts) setAccount(accounts[0]);\n    setAddress(userAddress);\n    setChain(userChain);\n  };\n\n  // Clear user state\n  const clearUserState = () => {\n    setUser(null);\n    setAddress(null);\n    setChain(null);\n    setAccount(null);\n    setMessage(null);\n    setToken(null);\n    setSignature(null);\n  };\n\n  // Disconnect user\n  const disconnect = async () => {\n    await web3Modal.clearCachedProvider();\n    clearUserState();\n  };\n\n  // Fetch authentication message from the engine API\n  const fetchMessage = async (userAddress: string) => {\n    const res = await fetch(\n      `${ENGINE_URL}/oauth/eth-get-message?address=${userAddress}`\n    );\n    if (res.ok) {\n      let json = await res.json();\n      setMessage(json.message || null);\n    } else {\n      console.error('Fetch message error', res.status);\n      clearUserState();\n    }\n  };\n\n  // Sign authentication message with MetaMask\n  const signMessage = async (lib: any, msg: string, userAccount: string) => {\n    if (!web3Modal) return;\n    try {\n      const newSignature = await lib.provider.request({\n        method: 'personal_sign',\n        params: [msg, userAccount],\n      });\n      setSignature(newSignature);\n    } catch (error) {\n      console.error('signMessage error', error);\n      clearUserState();\n    }\n  };\n\n  // Get access token from the engine API\n  const getToken = async (msg: string, signedMsg: string) => {\n    const res = await fetch(`${ENGINE_URL}/oauth/token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n      },\n      body: JSON.stringify({\n        grant_type: 'urn:grindery:eth-signature',\n        message: msg,\n        signature: signedMsg,\n      }),\n    });\n\n    if (res.ok) {\n      let result = await res.json();\n      setToken(result);\n    } else {\n      console.error('getToken error', res.status);\n      clearUserState();\n    }\n  };\n\n  // Set web3Modal instance\n  useEffect(() => {\n    const providerOptions = {};\n    const newWeb3Modal = new Web3Modal({\n      cacheProvider: cacheProvider,\n      network: 'mainnet',\n      providerOptions,\n    });\n    setWeb3Modal(newWeb3Modal);\n  }, []);\n\n  // connect automatically and without a popup if user was connected before\n  useEffect(() => {\n    if (web3Modal && web3Modal.cachedProvider) {\n      connect();\n    }\n  }, [web3Modal]);\n\n  // set user if token and address is known\n  useEffect(() => {\n    if (token?.access_token && address) {\n      setUser(`eip155:1:${address}`);\n    } else {\n      setUser(null);\n    }\n  }, [token?.access_token, address]);\n\n  // Fetch authentication message if user address is known\n  useEffect(() => {\n    if (address) {\n      fetchMessage(address);\n    }\n  }, [address]);\n\n  // Sign authentication message if message is known\n  useEffect(() => {\n    if (library && message && account && !signature) {\n      signMessage(library, message, account);\n    }\n  }, [library, message, account, signature]);\n\n  // Get authentication token if message is signed\n  useEffect(() => {\n    if (message && signature) {\n      getToken(message, signature);\n    }\n  }, [message, signature]);\n\n  return (\n    <GrinderyNexusContext.Provider\n      value={{\n        user,\n        address,\n        chain,\n        token,\n        message,\n        signature,\n        connect,\n        disconnect,\n        setUser,\n        setAddress,\n        setChain,\n      }}\n    >\n      {children}\n    </GrinderyNexusContext.Provider>\n  );\n};\n\n/** Grindery Nexus Hook */\nexport const useGrinderyNexus = () => useContext(GrinderyNexusContext);\n\nexport default GrinderyNexusContextProvider;\n"],"names":["ENGINE_URL","defaultContext","user","address","chain","token","message","signature","connect","disconnect","setUser","setAddress","setChain","GrinderyNexusContext","createContext","GrinderyNexusContextProvider","props","children","cacheProvider","useState","web3Modal","setWeb3Modal","library","setLibrary","account","setAccount","setMessage","setToken","setSignature","addListeners","web3ModalProvider","on","window","location","reload","provider","ethersProvider","providers","Web3Provider","getSigner","getAddress","userAddress","getChainId","userChain","listAccounts","accounts","clearUserState","clearCachedProvider","fetchMessage","fetch","res","ok","json","console","error","status","signMessage","lib","msg","userAccount","request","method","params","newSignature","getToken","signedMsg","headers","body","JSON","stringify","grant_type","result","useEffect","providerOptions","newWeb3Modal","Web3Modal","network","cachedProvider","access_token","React","Provider","value","useGrinderyNexus","useContext"],"mappings":"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"}