{"version":3,"file":"use-grindery-nexus.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from 'react';\n// @ts-ignore\nimport Web3Modal from 'web3modal';\n// @ts-ignore\nimport { providers } from 'ethers';\n\nexport type GrinderyNexusContextProps = {\n  /** Connect user wallet */\n  connect: () => void;\n\n  /** Disconnect user wallet */\n  disconnect: () => void;\n\n  /** User ID. Reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md */\n  user: string | null;\n\n  /** Set User ID  */\n  setUser: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** User wallet address  */\n  address: string | null;\n\n  /** Set user wallet address  */\n  setAddress: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** User chain id  */\n  chain: number | null;\n\n  /** Set user chain id  */\n  setChain: React.Dispatch<React.SetStateAction<number | null>>;\n};\n\nexport type GrinderyNexusContextProviderProps = {\n  children: React.ReactNode;\n\n  /** Automatically authenticate user */\n  cacheProvider?: boolean;\n};\n\n/** Grindery Nexus Context */\nexport const GrinderyNexusContext = createContext<GrinderyNexusContextProps>({\n  connect: () => {},\n  disconnect: () => {},\n  user: null,\n  setUser: () => {},\n  address: null,\n  setAddress: () => {},\n  chain: null,\n  setChain: () => {},\n});\n\n/** Grindery Nexus Context Provider */\nexport const GrinderyNexusContextProvider = (\n  props: GrinderyNexusContextProviderProps\n) => {\n  const children = props.children;\n  const cacheProvider =\n    typeof props.cacheProvider !== 'undefined' ? props.cacheProvider : true;\n\n  // Web3Modal instance\n  const [web3Modal, setWeb3Modal] = useState<any>(null);\n\n  // User id\n  const [user, setUser] = useState<string | null>(null);\n\n  // User wallet address\n  const [address, setAddress] = useState<string | null>(null);\n\n  // User chain id\n  const [chain, setChain] = useState<number | null>(null);\n\n  const addListeners = async (web3ModalProvider: any) => {\n    // Subscribe to account change\n    web3ModalProvider.on('accountsChanged', () => {\n      window.location.reload();\n    });\n  };\n\n  const connect = async () => {\n    const provider = await web3Modal.connect();\n    addListeners(provider);\n    const ethersProvider = new providers.Web3Provider(provider);\n    const userAddress = await ethersProvider.getSigner().getAddress();\n    const userChain = await ethersProvider.getSigner().getChainId();\n    setAddress(userAddress);\n    setChain(userChain);\n  };\n\n  const disconnect = async () => {\n    await web3Modal.clearCachedProvider();\n    setUser(null);\n    setAddress(null);\n    setChain(null);\n  };\n\n  useEffect(() => {\n    const providerOptions = {};\n\n    const newWeb3Modal = new Web3Modal({\n      cacheProvider: cacheProvider,\n      network: 'mainnet',\n      providerOptions,\n    });\n\n    setWeb3Modal(newWeb3Modal);\n  }, []);\n\n  useEffect(() => {\n    // connect automatically and without a popup if user is already connected\n    if (web3Modal && web3Modal.cachedProvider) {\n      connect();\n    }\n  }, [web3Modal]);\n\n  useEffect(() => {\n    if (address) {\n      setUser(`eip155:1:${address}`);\n    } else {\n      setUser(null);\n    }\n  }, [address]);\n\n  return (\n    <GrinderyNexusContext.Provider\n      value={{\n        connect,\n        disconnect,\n        user,\n        setUser,\n        address,\n        setAddress,\n        chain,\n        setChain,\n      }}\n    >\n      {children}\n    </GrinderyNexusContext.Provider>\n  );\n};\n\n/** Grindery Nexus Hook */\nexport const useGrinderyNexus = () => useContext(GrinderyNexusContext);\n\nexport default GrinderyNexusContextProvider;\n"],"names":["GrinderyNexusContext","createContext","connect","disconnect","user","setUser","address","setAddress","chain","setChain","GrinderyNexusContextProvider","props","children","cacheProvider","useState","web3Modal","setWeb3Modal","addListeners","web3ModalProvider","on","window","location","reload","_context2","provider","ethersProvider","providers","Web3Provider","getSigner","getAddress","userAddress","getChainId","userChain","_context3","clearCachedProvider","useEffect","newWeb3Modal","Web3Modal","network","providerOptions","cachedProvider","React","Provider","value","useContext"],"mappings":"+0NAwCaA,EAAuBC,gBAAyC,CAC3EC,QAAS,aACTC,WAAY,aACZC,KAAM,KACNC,QAAS,aACTC,QAAS,KACTC,WAAY,aACZC,MAAO,KACPC,SAAU,eAICC,EAA+B,SAC1CC,GAEA,IAAMC,EAAWD,EAAMC,SACjBC,OAC2B,IAAxBF,EAAME,eAAgCF,EAAME,gBAGnBC,WAAc,MAAzCC,OAAWC,SAGMF,WAAwB,MAAzCV,OAAMC,SAGiBS,WAAwB,MAA/CR,OAASC,SAGUO,WAAwB,MAA3CN,OAAOC,OAERQ,aAAY,kBAAG,WAAOC,GAAP,6BAAA,OAAA,sBAAA,OAEnBA,EAAkBC,GAAG,mBAAmB,WACtCC,OAAOC,SAASC,YAHC,OAAA,UAAA,0BAAH,mBAAA,mCAOZpB,aAAO,kBAAG,aAAA,YAAA,6BAAA,OAAA,sBAAA,OAAA,OAAAqB,SACSR,EAAUb,UADnB,OAAA,OAEde,EADMO,UAEAC,EAAiB,IAAIC,YAAUC,aAAaH,GAHpCD,SAIYE,EAAeG,YAAYC,aAJvC,OAAA,OAIRC,SAJQP,UAKUE,EAAeG,YAAYG,aALrC,QAKRC,SACNzB,EAAWuB,GACXrB,EAASuB,GAPK,QAAA,UAAA,0BAAH,kBAAA,mCAUP7B,aAAU,kBAAG,aAAA,6BAAA,OAAA,sBAAA,OAAA,OAAA8B,SACXlB,EAAUmB,sBADC,OAEjB7B,EAAQ,MACRE,EAAW,MACXE,EAAS,MAJQ,OAAA,UAAA,0BAAH,kBAAA,mCAkChB,OA3BA0B,aAAU,WACR,IAEMC,EAAe,IAAIC,EAAU,CACjCxB,cAAeA,EACfyB,QAAS,UACTC,gBALsB,KAQxBvB,EAAaoB,KACZ,IAEHD,aAAU,WAEJpB,GAAaA,EAAUyB,gBACzBtC,MAED,CAACa,IAEJoB,aAAU,WAEN9B,EADEC,cACkBA,EAEZ,QAET,CAACA,IAGFmC,gBAACzC,EAAqB0C,UACpBC,MAAO,CACLzC,QAAAA,EACAC,WAAAA,EACAC,KAAAA,EACAC,QAAAA,EACAC,QAAAA,EACAC,WAAAA,EACAC,MAAAA,EACAC,SAAAA,IAGDG,qHAMyB,WAAA,OAAMgC,aAAW5C"}