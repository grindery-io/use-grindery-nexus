{"version":3,"file":"use-grindery-nexus.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from 'react';\n// @ts-ignore\nimport Web3Modal from 'web3modal';\n// @ts-ignore\nimport { providers } from 'ethers';\n// @ts-ignore\nimport { encode } from 'universal-base64url';\n\nexport const ENGINE_URL = 'https://orchestrator.grindery.org';\n\n// Authentication token object definition\nexport type AuthToken = {\n  access_token: string;\n  expires_in: number;\n  refresh_token: string;\n  token_type: string;\n};\n\n// Context properties definition\nexport type GrinderyNexusContextProps = {\n  /** User ID. Reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md */\n  user: string | null;\n\n  /** Authentication token object */\n  token: AuthToken | null;\n\n  /** User wallet address  */\n  address: string | null;\n\n  /** User chain id  */\n  chain: number | null;\n\n  /** Authorization code */\n  code: string | null;\n\n  /** Connect user wallet */\n  connect: () => void;\n\n  /** Disconnect user wallet */\n  disconnect: () => void;\n\n  /** Set User ID  */\n  setUser: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user wallet address  */\n  setAddress: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user chain id  */\n  setChain: React.Dispatch<React.SetStateAction<number | null>>;\n};\n\nexport type GrinderyNexusContextProviderProps = {\n  children: React.ReactNode;\n\n  /** Automatically authenticate user */\n  cacheProvider?: boolean;\n};\n\n// Default context properties\nconst defaultContext = {\n  user: null,\n  address: null,\n  chain: null,\n  token: null,\n  code: null,\n  connect: () => {},\n  disconnect: () => {},\n  setUser: () => {},\n  setAddress: () => {},\n  setChain: () => {},\n};\n\n/** Grindery Nexus Context */\nexport const GrinderyNexusContext = createContext<GrinderyNexusContextProps>(\n  defaultContext\n);\n\n/** Grindery Nexus Context Provider */\nexport const GrinderyNexusContextProvider = (\n  props: GrinderyNexusContextProviderProps\n) => {\n  const children = props.children;\n  const cacheProvider =\n    typeof props.cacheProvider !== 'undefined' ? props.cacheProvider : true;\n\n  // Web3Modal instance\n  const [web3Modal, setWeb3Modal] = useState<any>(null);\n\n  // Web3Provider library\n  const [library, setLibrary] = useState<any>(null);\n\n  // User account\n  const [account, setAccount] = useState<string | null>(null);\n\n  // User id\n  const [user, setUser] = useState<string | null>(null);\n\n  // User wallet address\n  const [address, setAddress] = useState<string | null>(null);\n\n  // User chain id\n  const [chain, setChain] = useState<number | null>(null);\n\n  // Auth message\n  const [message, setMessage] = useState<string | null>(null);\n\n  // Authentication token object\n  const [token, setToken] = useState<AuthToken | null>(null);\n\n  // Signed authentication message\n  const [signature, setSignature] = useState<string | null>(null);\n\n  // Compiled authorization code\n  const code =\n    (message &&\n      signature &&\n      encode(\n        JSON.stringify({\n          message: message,\n          signature: signature,\n        })\n      )) ||\n    null;\n\n  // Subscribe to account change\n  const addListeners = async (web3ModalProvider: any) => {\n    web3ModalProvider.on('accountsChanged', () => {\n      window.location.reload();\n    });\n  };\n\n  // Connect MetaMask wallet\n  const connect = async () => {\n    const provider = await web3Modal.connect();\n    addListeners(provider);\n    const ethersProvider = new providers.Web3Provider(provider);\n    const userAddress = await ethersProvider.getSigner().getAddress();\n    const userChain = await ethersProvider.getSigner().getChainId();\n    const accounts = await ethersProvider.listAccounts();\n    setLibrary(ethersProvider);\n    if (accounts) setAccount(accounts[0]);\n    setAddress(userAddress);\n    setChain(userChain);\n  };\n\n  // Clear user state\n  const clearUserState = () => {\n    setUser(null);\n    setAddress(null);\n    setChain(null);\n    setAccount(null);\n    setMessage(null);\n    setToken(null);\n    setSignature(null);\n  };\n\n  // Disconnect user\n  const disconnect = async () => {\n    await web3Modal.clearCachedProvider();\n    clearUserState();\n    clearAuthSession();\n  };\n\n  // Fetch authentication message or access token from the engine API\n  const startSession = async (userAddress: string) => {\n    // Try to fetch access token\n    const resWithCreds = await fetch(\n      `${ENGINE_URL}/oauth/session?address=${userAddress}`,\n      {\n        method: 'GET',\n        credentials: 'include',\n      }\n    ).catch(async err => {\n      // If CORS error then fetch auth message\n      console.error('startSessionWithCreds error', err.message);\n      const res = await fetch(\n        `${ENGINE_URL}/oauth/session?address=${userAddress}`,\n        {\n          method: 'GET',\n        }\n      );\n\n      if (res && res.ok) {\n        let json = await res.json();\n        setMessage(json.message || null);\n      } else {\n        console.error(\n          'startSession error',\n          (res && res.status) || 'Unknown error'\n        );\n      }\n    });\n\n    if (resWithCreds && resWithCreds.ok) {\n      let json = await resWithCreds.json();\n\n      // Set access token if exists\n      if (json.access_token) {\n        setToken(json);\n      } else if (json.message) {\n        // Or set auth message\n        setMessage(json.message);\n      }\n    } else {\n      console.error(\n        'startSessionWithCreds error',\n        (resWithCreds && resWithCreds.status) || 'Unknown error'\n      );\n    }\n  };\n\n  // Sign authentication message with MetaMask\n  const signMessage = async (lib: any, msg: string, userAccount: string) => {\n    if (!web3Modal) return;\n    try {\n      const newSignature = await lib.provider.request({\n        method: 'personal_sign',\n        params: [msg, userAccount],\n      });\n      setSignature(newSignature);\n    } catch (error) {\n      console.error('signMessage error', error);\n      clearUserState();\n    }\n  };\n\n  // Get access token from the engine API\n  const getToken = async (code: string) => {\n    const res = await fetch(`${ENGINE_URL}/oauth/token?code=${code}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        grant_type: 'authorization_code',\n      }),\n    });\n\n    if (res.ok) {\n      let result = await res.json();\n      setToken(result);\n    } else {\n      console.error('getToken error', res.status);\n      clearUserState();\n    }\n  };\n\n  // Set refresh_token cookie\n  const registerAuthSession = async (refresh_token: string) => {\n    const res = await fetch(`${ENGINE_URL}/oauth/session-register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        credentials: 'include',\n      },\n      body: JSON.stringify({\n        refresh_token: refresh_token,\n      }),\n    });\n\n    if (!res.ok) {\n      console.error('registerAuthSession error', res.status);\n    }\n  };\n\n  // Remove refresh_token cookie\n  const clearAuthSession = async () => {\n    const res = await fetch(`${ENGINE_URL}/oauth/session-register`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        credentials: 'include',\n      },\n    });\n\n    if (!res.ok) {\n      console.error('clearAuthSession error', res.status);\n    }\n  };\n\n  // Set web3Modal instance\n  useEffect(() => {\n    const providerOptions = {};\n    const newWeb3Modal = new Web3Modal({\n      cacheProvider: cacheProvider,\n      network: 'mainnet',\n      providerOptions,\n    });\n    setWeb3Modal(newWeb3Modal);\n  }, []);\n\n  // connect automatically and without a popup if user was connected before\n  useEffect(() => {\n    if (web3Modal && web3Modal.cachedProvider) {\n      connect();\n    }\n  }, [web3Modal]);\n\n  // set user if token and address is known\n  useEffect(() => {\n    if (address && token && token.access_token) {\n      setUser(`eip155:1:${address}`);\n      if (token.refresh_token) {\n        registerAuthSession(token.refresh_token);\n      }\n    } else {\n      setUser(null);\n    }\n  }, [token, address]);\n\n  // Start session if user address is known\n  useEffect(() => {\n    if (address && !message && !signature && !token) {\n      startSession(address);\n    }\n  }, [address, message, signature, token]);\n\n  // Sign authentication message if message is known\n  useEffect(() => {\n    if (library && message && account && !signature && !token) {\n      signMessage(library, message, account);\n    }\n  }, [library, message, account, signature, token]);\n\n  // Get authentication token if message is signed\n  useEffect(() => {\n    if (code && !token) {\n      getToken(code);\n    }\n  }, [code, token]);\n\n  return (\n    <GrinderyNexusContext.Provider\n      value={{\n        user,\n        address,\n        chain,\n        token,\n        code,\n        connect,\n        disconnect,\n        setUser,\n        setAddress,\n        setChain,\n      }}\n    >\n      {children}\n    </GrinderyNexusContext.Provider>\n  );\n};\n\n/** Grindery Nexus Hook */\nexport const useGrinderyNexus = () => useContext(GrinderyNexusContext);\n\nexport default GrinderyNexusContextProvider;\n"],"names":["ENGINE_URL","GrinderyNexusContext","createContext","user","address","chain","token","code","connect","disconnect","setUser","setAddress","setChain","GrinderyNexusContextProvider","props","children","cacheProvider","useState","web3Modal","setWeb3Modal","library","setLibrary","account","setAccount","message","setMessage","setToken","signature","setSignature","encode","JSON","stringify","addListeners","web3ModalProvider","on","window","location","reload","_context2","provider","ethersProvider","providers","Web3Provider","getSigner","getAddress","userAddress","getChainId","userChain","listAccounts","accounts","clearUserState","_context3","clearCachedProvider","clearAuthSession","startSession","_context5","fetch","method","credentials","err","console","error","_context4","res","ok","json","status","resWithCreds","access_token","signMessage","lib","msg","userAccount","_context6","request","params","getToken","_context7","headers","Content-Type","body","grant_type","registerAuthSession","refresh_token","_context8","_context9","useEffect","newWeb3Modal","Web3Modal","network","providerOptions","cachedProvider","React","Provider","value","useContext"],"mappings":"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"}