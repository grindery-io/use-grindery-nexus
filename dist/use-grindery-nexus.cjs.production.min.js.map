{"version":3,"file":"use-grindery-nexus.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from 'react';\n// @ts-ignore\nimport Web3Modal from 'web3modal';\n// @ts-ignore\nimport { providers } from 'ethers';\n\nexport const ENGINE_URL = 'https://orchestrator.grindery.org';\n\n// Authentication token object definition\nexport type AuthToken = {\n  access_token: string;\n  expires_in: number;\n  refresh_token: string;\n  token_type: string;\n};\n\n// Context properties definition\nexport type GrinderyNexusContextProps = {\n  /** User ID. Reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md */\n  user: string | null;\n\n  /** Authentication token object */\n  token: AuthToken | null;\n\n  /** User wallet address  */\n  address: string | null;\n\n  /** User chain id  */\n  chain: number | null;\n\n  /** Authentication message */\n  message: string | null;\n\n  /** Signed authentication message */\n  signature: string | null;\n\n  /** Connect user wallet */\n  connect: () => void;\n\n  /** Disconnect user wallet */\n  disconnect: () => void;\n\n  /** Set User ID  */\n  setUser: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user wallet address  */\n  setAddress: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user chain id  */\n  setChain: React.Dispatch<React.SetStateAction<number | null>>;\n};\n\nexport type GrinderyNexusContextProviderProps = {\n  children: React.ReactNode;\n\n  /** Automatically authenticate user */\n  cacheProvider?: boolean;\n};\n\n// Default context properties\nconst defaultContext = {\n  user: null,\n  address: null,\n  chain: null,\n  token: null,\n  message: null,\n  signature: null,\n  connect: () => {},\n  disconnect: () => {},\n  setUser: () => {},\n  setAddress: () => {},\n  setChain: () => {},\n};\n\n/** Grindery Nexus Context */\nexport const GrinderyNexusContext = createContext<GrinderyNexusContextProps>(\n  defaultContext\n);\n\n/** Grindery Nexus Context Provider */\nexport const GrinderyNexusContextProvider = (\n  props: GrinderyNexusContextProviderProps\n) => {\n  const children = props.children;\n  const cacheProvider =\n    typeof props.cacheProvider !== 'undefined' ? props.cacheProvider : true;\n\n  // Web3Modal instance\n  const [web3Modal, setWeb3Modal] = useState<any>(null);\n\n  // Web3Provider library\n  const [library, setLibrary] = useState<any>(null);\n\n  // User account\n  const [account, setAccount] = useState<string | null>(null);\n\n  // User id\n  const [user, setUser] = useState<string | null>(null);\n\n  // User wallet address\n  const [address, setAddress] = useState<string | null>(null);\n\n  // User chain id\n  const [chain, setChain] = useState<number | null>(null);\n\n  // Auth message\n  const [message, setMessage] = useState<string | null>(null);\n\n  // Authentication token object\n  const [token, setToken] = useState<AuthToken | null>(null);\n\n  // Signed authentication message\n  const [signature, setSignature] = useState<string | null>(null);\n\n  // Subscribe to account change\n  const addListeners = async (web3ModalProvider: any) => {\n    web3ModalProvider.on('accountsChanged', () => {\n      window.location.reload();\n    });\n  };\n\n  // Connect MetaMask wallet\n  const connect = async () => {\n    const provider = await web3Modal.connect();\n    addListeners(provider);\n    const ethersProvider = new providers.Web3Provider(provider);\n    const userAddress = await ethersProvider.getSigner().getAddress();\n    const userChain = await ethersProvider.getSigner().getChainId();\n    const accounts = await ethersProvider.listAccounts();\n    setLibrary(ethersProvider);\n    if (accounts) setAccount(accounts[0]);\n    setAddress(userAddress);\n    setChain(userChain);\n  };\n\n  // Clear user state\n  const clearUserState = () => {\n    setUser(null);\n    setAddress(null);\n    setChain(null);\n    setAccount(null);\n    setMessage(null);\n    setToken(null);\n    setSignature(null);\n  };\n\n  // Disconnect user\n  const disconnect = async () => {\n    await web3Modal.clearCachedProvider();\n    clearUserState();\n  };\n\n  // Fetch authentication message from the engine API\n  const fetchMessage = async (userAddress: string) => {\n    const res = await fetch(\n      `${ENGINE_URL}/oauth/eth-get-message?address=${userAddress}`\n    );\n    if (res.ok) {\n      let json = await res.json();\n      setMessage(json.message || null);\n    } else {\n      console.error('Fetch message error', res.status);\n      clearUserState();\n    }\n  };\n\n  // Sign authentication message with MetaMask\n  const signMessage = async (lib: any, msg: string, userAccount: string) => {\n    if (!web3Modal) return;\n    try {\n      const newSignature = await lib.provider.request({\n        method: 'personal_sign',\n        params: [msg, userAccount],\n      });\n      setSignature(newSignature);\n    } catch (error) {\n      console.error('signMessage error', error);\n      clearUserState();\n    }\n  };\n\n  // Get access token from the engine API\n  const getToken = async (msg: string, signedMsg: string) => {\n    const res = await fetch(`${ENGINE_URL}/oauth/token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8',\n      },\n      body: JSON.stringify({\n        grant_type: 'urn:grindery:eth-signature',\n        message: msg,\n        signature: signedMsg,\n      }),\n    });\n\n    if (res.ok) {\n      let result = await res.json();\n      setToken(result);\n    } else {\n      console.error('getToken error', res.status);\n      clearUserState();\n    }\n  };\n\n  // Set web3Modal instance\n  useEffect(() => {\n    const providerOptions = {};\n    const newWeb3Modal = new Web3Modal({\n      cacheProvider: cacheProvider,\n      network: 'mainnet',\n      providerOptions,\n    });\n    setWeb3Modal(newWeb3Modal);\n  }, []);\n\n  // connect automatically and without a popup if user was connected before\n  useEffect(() => {\n    if (web3Modal && web3Modal.cachedProvider) {\n      connect();\n    }\n  }, [web3Modal]);\n\n  // set user if token and address is known\n  useEffect(() => {\n    if (token?.access_token && address) {\n      setUser(`eip155:1:${address}`);\n    } else {\n      setUser(null);\n    }\n  }, [token?.access_token, address]);\n\n  // Fetch authentication message if user address is known\n  useEffect(() => {\n    if (address) {\n      fetchMessage(address);\n    }\n  }, [address]);\n\n  // Sign authentication message if message is known\n  useEffect(() => {\n    if (library && message && account && !signature) {\n      signMessage(library, message, account);\n    }\n  }, [library, message, account, signature]);\n\n  // Get authentication token if message is signed\n  useEffect(() => {\n    if (message && signature) {\n      getToken(message, signature);\n    }\n  }, [message, signature]);\n\n  return (\n    <GrinderyNexusContext.Provider\n      value={{\n        user,\n        address,\n        chain,\n        token,\n        message,\n        signature,\n        connect,\n        disconnect,\n        setUser,\n        setAddress,\n        setChain,\n      }}\n    >\n      {children}\n    </GrinderyNexusContext.Provider>\n  );\n};\n\n/** Grindery Nexus Hook */\nexport const useGrinderyNexus = () => useContext(GrinderyNexusContext);\n\nexport default GrinderyNexusContextProvider;\n"],"names":["ENGINE_URL","GrinderyNexusContext","createContext","user","address","chain","token","message","signature","connect","disconnect","setUser","setAddress","setChain","GrinderyNexusContextProvider","props","children","cacheProvider","useState","web3Modal","setWeb3Modal","library","setLibrary","account","setAccount","setMessage","setToken","setSignature","addListeners","web3ModalProvider","on","window","location","reload","_context2","provider","ethersProvider","providers","Web3Provider","getSigner","getAddress","userAddress","getChainId","userChain","listAccounts","accounts","clearUserState","_context3","clearCachedProvider","fetchMessage","_context4","fetch","res","ok","json","console","error","status","signMessage","lib","msg","userAccount","_context5","request","method","params","getToken","signedMsg","_context6","headers","Content-Type","body","JSON","stringify","grant_type","useEffect","newWeb3Modal","Web3Modal","network","providerOptions","cachedProvider","access_token","React","Provider","value","useContext"],"mappings":"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"}