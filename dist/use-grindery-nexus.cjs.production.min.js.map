{"version":3,"file":"use-grindery-nexus.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from 'react';\n// @ts-ignore\nimport Web3Modal from 'web3modal';\n// @ts-ignore\nimport * as ethersLib from 'ethers';\n// @ts-ignore\nimport { encode } from 'universal-base64url';\n// @ts-ignore\nimport * as fcl from '@onflow/fcl';\n\nexport const ENGINE_URL = 'https://orchestrator.grindery.org';\n\ndeclare global {\n  interface Window {\n    nexus_auth: any;\n  }\n}\n\n// Flow authentication account proof data type\ntype AccountProofData = {\n  // e.g. \"Awesome App (v0.0)\" - A human readable string to identify your application during signing\n  appIdentifier: string;\n\n  // e.g. \"75f8587e5bd5f9dcc9909d0dae1f0ac5814458b2ae129620502cb936fde7120a\" - minimum 32-byte random nonce as hex string\n  nonce: string;\n};\n\n// Flow auth account proof data resolver type\ntype AccountProofDataResolver = () => Promise<AccountProofData | null>;\n\n// Flow auth config\nfcl.config({\n  'flow.network': 'mainnet',\n  'discovery.wallet': 'https://fcl-discovery.onflow.org/authn',\n  'app.detail.title': 'Grindery Nexus',\n  'app.detail.icon':\n    'https://nexus.grindery.org/static/media/nexus-square.7402bdeb27ab56504250ca409fac38bd.svg',\n});\n\n// Authentication token object definition\nexport type AuthToken = {\n  access_token: string;\n  expires_in: number;\n  refresh_token: string;\n  token_type: string;\n};\n\n// Flow user type\ntype FlowUser = {\n  addr: string;\n  services?: any[];\n};\n\n// Context properties definition\nexport type GrinderyNexusContextProps = {\n  /** User ID. Reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md */\n  user: string | null;\n\n  /** Authentication token object */\n  token: AuthToken | null;\n\n  /** User wallet address  */\n  address: string | null;\n\n  /** User chain id  */\n  chain: number | string | null;\n\n  /** Authorization code */\n  code: string | null;\n\n  /** Flow user object */\n  flowUser: FlowUser;\n\n  /** Ethers provider */\n  provider: any;\n\n  /** Ethers */\n  ethers: any;\n\n  /** Connect user wallet */\n  connect: () => void;\n\n  /** Disconnect user wallet */\n  disconnect: () => void;\n\n  /** Set User ID  */\n  setUser: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user wallet address  */\n  setAddress: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user chain id  */\n  setChain: React.Dispatch<React.SetStateAction<number | string | null>>;\n\n  /** Connect flow user */\n  connectFlow: () => void;\n};\n\nexport type GrinderyNexusContextProviderProps = {\n  children: React.ReactNode;\n\n  /** Automatically authenticate user */\n  cacheProvider?: boolean;\n};\n\n// Default context properties\nconst defaultContext = {\n  user: null,\n  address: null,\n  chain: null,\n  token: null,\n  code: null,\n  flowUser: { addr: '' },\n  provider: null,\n  ethers: null,\n  connect: () => {},\n  disconnect: () => {},\n  setUser: () => {},\n  setAddress: () => {},\n  setChain: () => {},\n  connectFlow: () => {},\n};\n\n/** Grindery Nexus Context */\nexport const GrinderyNexusContext = createContext<GrinderyNexusContextProps>(\n  defaultContext\n);\n\n/** Grindery Nexus Context Provider */\nexport const GrinderyNexusContextProvider = (\n  props: GrinderyNexusContextProviderProps\n) => {\n  const children = props.children;\n  const cacheProvider =\n    typeof props.cacheProvider !== 'undefined' ? props.cacheProvider : true;\n\n  // Web3Modal instance\n  const [web3Modal, setWeb3Modal] = useState<any>(null);\n\n  // Web3Provider library\n  const [library, setLibrary] = useState<any>(null);\n\n  // User account\n  const [account, setAccount] = useState<string | null>(null);\n\n  // User id\n  const [user, setUser] = useState<string | null>(null);\n\n  // User wallet address\n  const [address, setAddress] = useState<string | null>(null);\n\n  // User chain id\n  const [chain, setChain] = useState<number | string | null>(null);\n\n  // Auth message\n  const [message, setMessage] = useState<string | null>(null);\n\n  // Authentication token object\n  const [token, setToken] = useState<AuthToken | null>(null);\n\n  // Signed authentication message\n  const [signature, setSignature] = useState<string | null>(null);\n\n  // Flow chain user\n  const [flowUser, setFlowUser] = useState<FlowUser>({ addr: '' });\n\n  // Is Flow account resolver called\n  const [resolverCalled, setResolverCalled] = useState(false);\n\n  const provider = library;\n\n  const ethers = ethersLib;\n\n  const flowProof =\n    flowUser &&\n    flowUser.addr &&\n    flowUser.services?.find(service => service.type === 'account-proof');\n\n  // Compiled authorization code\n  const code =\n    (message &&\n      signature &&\n      encode(\n        JSON.stringify({\n          message: message,\n          signature: signature,\n        })\n      )) ||\n    (flowProof &&\n      flowProof.data &&\n      flowProof.data.nonce &&\n      flowProof.data.signatures &&\n      flowProof.data.signatures.length > 0 &&\n      flowProof.data.address &&\n      resolverCalled &&\n      encode(\n        JSON.stringify({\n          type: 'flow',\n          address: flowProof.data.address,\n          nonce: flowProof.data.nonce,\n          signatures: flowProof.data.signatures,\n        })\n      )) ||\n    null;\n\n  // Subscribe to account change\n  const addListeners = async (web3ModalProvider: any) => {\n    web3ModalProvider.on('accountsChanged', () => {\n      window.location.reload();\n    });\n\n    web3ModalProvider.on('disconnect', async () => {\n      await web3Modal.clearCachedProvider();\n      disconnect();\n    });\n  };\n\n  // Connect MetaMask wallet\n  const connect = async () => {\n    const provider = await web3Modal.connect();\n    addListeners(provider);\n    const ethersProvider = new ethersLib.providers.Web3Provider(provider);\n    const userAddress = await ethersProvider.getSigner().getAddress();\n    //const userChain = await ethersProvider.getSigner().getChainId();\n    const accounts = await ethersProvider.listAccounts();\n    setLibrary(ethersProvider);\n    if (accounts) setAccount(accounts[0]);\n    setAddress(userAddress);\n    // For EVM wallet always set Ethereum chain\n    setChain('eip155:1');\n  };\n\n  // Connect with Flow wallet\n  const connectFlow = () => {\n    fcl.authenticate();\n  };\n\n  // Clear user state\n  const clearUserState = () => {\n    setUser(null);\n    setAddress(null);\n    setChain(null);\n    setAccount(null);\n    setMessage(null);\n    setToken(null);\n    setSignature(null);\n    setFlowUser({ addr: '' });\n  };\n\n  // Disconnect user\n  const disconnect = async () => {\n    await web3Modal.clearCachedProvider();\n    if (flowUser && flowUser.addr) {\n      fcl.unauthenticate();\n    }\n    clearUserState();\n    clearAuthSession();\n  };\n\n  // Fetch authentication message or access token from the engine API\n  const startSession = async (userAddress: string) => {\n    // Try to fetch access token\n    const resWithCreds = await fetch(\n      `${ENGINE_URL}/oauth/session?address=${userAddress}`,\n      {\n        method: 'GET',\n        credentials: 'include',\n      }\n    );\n    if (resWithCreds && resWithCreds.ok) {\n      let json = await resWithCreds.json();\n\n      // Set access token if exists\n      if (json.access_token) {\n        setToken(json);\n      } else if (json.message) {\n        // Or set auth message\n        setMessage(json.message);\n      }\n    } else {\n      console.error(\n        'startSessionWithCreds error',\n        (resWithCreds && resWithCreds.status) || 'Unknown error'\n      );\n    }\n  };\n\n  // Sign authentication message with MetaMask\n  const signMessage = async (lib: any, msg: string, userAccount: string) => {\n    if (!web3Modal) return;\n    try {\n      const newSignature = await lib.provider.request({\n        method: 'personal_sign',\n        params: [msg, userAccount],\n      });\n      setSignature(newSignature);\n    } catch (error) {\n      console.error('signMessage error', error);\n      clearUserState();\n    }\n  };\n\n  // Get access token from the engine API\n  const getToken = async (code: string) => {\n    const res = await fetch(`${ENGINE_URL}/oauth/token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        grant_type: 'authorization_code',\n        code: code,\n      }),\n    });\n\n    if (res.ok) {\n      let result = await res.json();\n      // Set address and chain if Flow user proofed\n      if (flowProof) {\n        setAddress((flowUser && flowUser.addr) || null);\n        setChain('flow:mainnet');\n      }\n      setToken(result);\n    } else {\n      console.error('getToken error', res.status);\n      // handle expried nonce for Flow user\n      if (flowProof) {\n        try {\n          await disconnect();\n        } catch (err) {\n          //\n        }\n        fcl.authenticate();\n      } else {\n        clearUserState();\n        disconnect();\n      }\n    }\n  };\n\n  // Set refresh_token cookie\n  const registerAuthSession = async (refresh_token: string) => {\n    const res = await fetch(`${ENGINE_URL}/oauth/session-register`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        refresh_token: refresh_token,\n      }),\n    });\n\n    if (!res.ok) {\n      console.error('registerAuthSession error', res.status);\n    }\n  };\n\n  // Remove refresh_token cookie\n  const clearAuthSession = async () => {\n    const res = await fetch(`${ENGINE_URL}/oauth/session-register`, {\n      method: 'POST',\n      credentials: 'include',\n    });\n\n    if (!res.ok) {\n      console.error('clearAuthSession error', res.status);\n    }\n  };\n\n  // Flow auth account proof data resolver\n  const accountProofDataResolver: AccountProofDataResolver = async () => {\n    setResolverCalled(true);\n\n    const res = await fetch(`${ENGINE_URL}/oauth/flow/session`, {\n      method: 'GET',\n      credentials: 'include',\n    });\n\n    if (res && res.ok) {\n      let json = await res.json();\n\n      // Return nonce on success\n      if (json.nonce) {\n        return {\n          appIdentifier: 'Grindery Nexus',\n          nonce: json.nonce,\n        };\n      } else {\n        throw new Error('get nonce failed');\n      }\n    } else {\n      console.error(\n        'getFlowNonce error',\n        (res && res.status) || 'Unknown error'\n      );\n      throw new Error('get nonce failed');\n    }\n  };\n\n  const restoreFlowSession = async (address: string) => {\n    const res = await fetch(\n      `${ENGINE_URL}/oauth/flow/session?address=${address}`,\n      {\n        method: 'GET',\n        credentials: 'include',\n      }\n    );\n\n    if (res && res.ok) {\n      let json = await res.json();\n\n      // Return nonce on success\n      if (json.access_token) {\n        setToken(json);\n        setAddress(address);\n        setChain('flow:mainnet');\n      } else {\n        throw new Error('flow user session failed');\n      }\n    } else {\n      console.error(\n        'flow user session failed',\n        (res && res.status) || 'Unknown error'\n      );\n      throw new Error('flow user session failed');\n    }\n  };\n\n  useEffect(() => {\n    fcl.config().put('fcl.accountProof.resolver', accountProofDataResolver);\n  }, []);\n\n  // Set web3Modal instance\n  useEffect(() => {\n    const providerOptions = {};\n    const newWeb3Modal = new Web3Modal({\n      cacheProvider: cacheProvider,\n      network: 'mainnet',\n      providerOptions,\n    });\n    setWeb3Modal(newWeb3Modal);\n  }, []);\n\n  // connect automatically and without a popup if user was connected before\n  useEffect(() => {\n    if (web3Modal && web3Modal.cachedProvider) {\n      connect();\n    }\n  }, [web3Modal]);\n\n  // set user if token and address is known\n  useEffect(() => {\n    if (address && token && token.access_token && chain) {\n      setUser(`${chain}:${address}`);\n      if (token.refresh_token) {\n        registerAuthSession(token.refresh_token);\n      }\n    } else {\n      setUser(null);\n    }\n  }, [token, address, chain]);\n\n  // Start session if user address is known\n  useEffect(() => {\n    if (address && !message && !signature && !token) {\n      startSession(address);\n    }\n  }, [address, message, signature, token]);\n\n  // Sign authentication message if message is known\n  useEffect(() => {\n    if (library && message && account && !signature && !token) {\n      signMessage(library, message, account);\n    }\n  }, [library, message, account, signature, token]);\n\n  // Get authentication token if message is signed\n  useEffect(() => {\n    if (code && !token) {\n      getToken(code);\n    }\n  }, [code, token]);\n\n  // subscribe to flow user update\n  useEffect(() => {\n    fcl.currentUser.subscribe(setFlowUser);\n  }, []);\n\n  // Restore Flow user session if user available without resolver\n  useEffect(() => {\n    if (flowUser && flowUser.addr && !resolverCalled) {\n      restoreFlowSession(flowUser.addr);\n    }\n  }, [flowUser, resolverCalled]);\n\n  useEffect(() => {\n    window.nexus_auth = {\n      user,\n      address,\n      chain,\n      message,\n      token,\n      flowUser,\n    };\n  }, [user, address, chain, message, token, flowUser]);\n\n  return (\n    <GrinderyNexusContext.Provider\n      value={{\n        user,\n        address,\n        chain,\n        token,\n        code,\n        flowUser,\n        provider,\n        ethers,\n        connect,\n        disconnect,\n        setUser,\n        setAddress,\n        setChain,\n        connectFlow,\n      }}\n    >\n      {children}\n    </GrinderyNexusContext.Provider>\n  );\n};\n\n/** Grindery Nexus Hook */\nexport const useGrinderyNexus = () => useContext(GrinderyNexusContext);\n\nexport default GrinderyNexusContextProvider;\n"],"names":["ENGINE_URL","fcl","flow.network","discovery.wallet","app.detail.title","app.detail.icon","GrinderyNexusContext","createContext","user","address","chain","token","code","flowUser","addr","provider","ethers","connect","disconnect","setUser","setAddress","setChain","connectFlow","GrinderyNexusContextProvider","props","children","cacheProvider","useState","web3Modal","setWeb3Modal","library","setLibrary","account","setAccount","message","setMessage","setToken","signature","setSignature","setFlowUser","resolverCalled","setResolverCalled","ethersLib","flowProof","services","_flowUser$services","find","service","type","encode","JSON","stringify","data","nonce","signatures","length","addListeners","web3ModalProvider","on","window","location","reload","_context","clearCachedProvider","_context3","ethersProvider","Web3Provider","getSigner","getAddress","userAddress","listAccounts","accounts","clearUserState","_context4","clearAuthSession","startSession","_context5","fetch","method","credentials","resWithCreds","ok","json","access_token","console","error","status","signMessage","lib","msg","userAccount","_context6","request","params","getToken","_context7","headers","Content-Type","body","grant_type","res","result","registerAuthSession","refresh_token","_context8","_context9","accountProofDataResolver","_context10","appIdentifier","Error","restoreFlowSession","_context11","useEffect","put","newWeb3Modal","Web3Modal","network","providerOptions","cachedProvider","subscribe","nexus_auth","React","Provider","value","useContext"],"mappings":"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"}