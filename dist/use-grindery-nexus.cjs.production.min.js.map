{"version":3,"file":"use-grindery-nexus.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from 'react';\n// @ts-ignore\nimport Web3Modal from 'web3modal';\n// @ts-ignore\nimport { providers } from 'ethers';\n// @ts-ignore\nimport { encode } from 'universal-base64url';\n// @ts-ignore\nimport * as fcl from '@onflow/fcl';\n\nexport const ENGINE_URL = 'https://orchestrator.grindery.org';\n\n// Flow authentication account proof data type\ntype AccountProofData = {\n  // e.g. \"Awesome App (v0.0)\" - A human readable string to identify your application during signing\n  appIdentifier: string;\n\n  // e.g. \"75f8587e5bd5f9dcc9909d0dae1f0ac5814458b2ae129620502cb936fde7120a\" - minimum 32-byte random nonce as hex string\n  nonce: string;\n};\n\n// Flow auth account proof data resolver type\ntype AccountProofDataResolver = () => Promise<AccountProofData | null>;\n\n// Flow auth account proof data resolver\nconst accountProofDataResolver: AccountProofDataResolver = async () => {\n  const resWithCreds = await fetch(`${ENGINE_URL}/oauth/flow-get-nonce`, {\n    method: 'GET',\n    credentials: 'include',\n  });\n\n  if (resWithCreds && resWithCreds.ok) {\n    let json = await resWithCreds.json();\n\n    // Set access token if exists\n    if (json.nonce) {\n      return {\n        appIdentifier: 'Grindery Nexus',\n        nonce: json.nonce,\n      };\n    } else {\n      throw new Error('get nonce failed');\n    }\n  } else {\n    console.error(\n      'getFlowNonce error',\n      (resWithCreds && resWithCreds.status) || 'Unknown error'\n    );\n    throw new Error('get nonce failed');\n  }\n};\n\n// Flow auth config\nfcl.config({\n  'flow.network': 'mainnet',\n  //\"accessNode.api\": \"http://rest-mainnet.onflow.org\",\n  'discovery.wallet': 'https://fcl-discovery.onflow.org/testnet/authn',\n  //\"discovery.authn.endpoint\": \"https://fcl-discovery.onflow.org/api/mainnet/authn\",\n  //\"discovery.authn.include\": [\"0x82ec283f88a62e65\", \"0x9d2e44203cb13051\"], // Service account address\n  'app.detail.title': 'Grindery Nexus',\n  'app.detail.icon':\n    'https://nexus.grindery.org/static/media/nexus-square.7402bdeb27ab56504250ca409fac38bd.svg',\n  'fcl.accountProof.resolver': accountProofDataResolver,\n});\n\n// Authentication token object definition\nexport type AuthToken = {\n  access_token: string;\n  expires_in: number;\n  refresh_token: string;\n  token_type: string;\n};\n\n// Flow user type\ntype FlowUser = {\n  addr: string;\n  services?: any[];\n};\n\n// Context properties definition\nexport type GrinderyNexusContextProps = {\n  /** User ID. Reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md */\n  user: string | null;\n\n  /** Authentication token object */\n  token: AuthToken | null;\n\n  /** User wallet address  */\n  address: string | null;\n\n  /** User chain id  */\n  chain: number | string | null;\n\n  /** Authorization code */\n  code: string | null;\n\n  /** Flow user object */\n  flowUser: FlowUser;\n\n  /** Connect user wallet */\n  connect: () => void;\n\n  /** Disconnect user wallet */\n  disconnect: () => void;\n\n  /** Set User ID  */\n  setUser: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user wallet address  */\n  setAddress: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user chain id  */\n  setChain: React.Dispatch<React.SetStateAction<number | string | null>>;\n\n  /** Connect flow user */\n  connectFlow: () => void;\n};\n\nexport type GrinderyNexusContextProviderProps = {\n  children: React.ReactNode;\n\n  /** Automatically authenticate user */\n  cacheProvider?: boolean;\n};\n\n// Default context properties\nconst defaultContext = {\n  user: null,\n  address: null,\n  chain: null,\n  token: null,\n  code: null,\n  flowUser: { addr: '' },\n  connect: () => {},\n  disconnect: () => {},\n  setUser: () => {},\n  setAddress: () => {},\n  setChain: () => {},\n  connectFlow: () => {},\n};\n\n/** Grindery Nexus Context */\nexport const GrinderyNexusContext = createContext<GrinderyNexusContextProps>(\n  defaultContext\n);\n\n/** Grindery Nexus Context Provider */\nexport const GrinderyNexusContextProvider = (\n  props: GrinderyNexusContextProviderProps\n) => {\n  const children = props.children;\n  const cacheProvider =\n    typeof props.cacheProvider !== 'undefined' ? props.cacheProvider : true;\n\n  // Web3Modal instance\n  const [web3Modal, setWeb3Modal] = useState<any>(null);\n\n  // Web3Provider library\n  const [library, setLibrary] = useState<any>(null);\n\n  // User account\n  const [account, setAccount] = useState<string | null>(null);\n\n  // User id\n  const [user, setUser] = useState<string | null>(null);\n\n  // User wallet address\n  const [address, setAddress] = useState<string | null>(null);\n\n  // User chain id\n  const [chain, setChain] = useState<number | string | null>(null);\n\n  // Auth message\n  const [message, setMessage] = useState<string | null>(null);\n\n  // Authentication token object\n  const [token, setToken] = useState<AuthToken | null>(null);\n\n  // Signed authentication message\n  const [signature, setSignature] = useState<string | null>(null);\n\n  // Flow chain user\n  const [flowUser, setFlowUser] = useState<FlowUser>({ addr: '' });\n\n  // Compiled authorization code\n  const code =\n    (message &&\n      signature &&\n      encode(\n        JSON.stringify({\n          message: message,\n          signature: signature,\n        })\n      )) ||\n    null;\n\n  // Subscribe to account change\n  const addListeners = async (web3ModalProvider: any) => {\n    web3ModalProvider.on('accountsChanged', () => {\n      window.location.reload();\n    });\n\n    web3ModalProvider.on('disconnect', async () => {\n      await web3Modal.clearCachedProvider();\n      disconnect();\n    });\n  };\n\n  // Connect MetaMask wallet\n  const connect = async () => {\n    const provider = await web3Modal.connect();\n    addListeners(provider);\n    const ethersProvider = new providers.Web3Provider(provider);\n    const userAddress = await ethersProvider.getSigner().getAddress();\n    //const userChain = await ethersProvider.getSigner().getChainId();\n    const accounts = await ethersProvider.listAccounts();\n    setLibrary(ethersProvider);\n    if (accounts) setAccount(accounts[0]);\n    setAddress(userAddress);\n    setChain('eip155:1');\n  };\n\n  // Connect with Flow wallet\n  const connectFlow = () => {\n    fcl.authenticate();\n  };\n\n  // Clear user state\n  const clearUserState = () => {\n    setUser(null);\n    setAddress(null);\n    setChain(null);\n    setAccount(null);\n    setMessage(null);\n    setToken(null);\n    setSignature(null);\n  };\n\n  // Disconnect user\n  const disconnect = async () => {\n    await web3Modal.clearCachedProvider();\n    clearUserState();\n    clearAuthSession();\n    if (flowUser) {\n      fcl.unauthenticate();\n    }\n  };\n\n  // Fetch authentication message or access token from the engine API\n  const startSession = async (userAddress: string) => {\n    // Try to fetch access token\n    const resWithCreds = await fetch(\n      `${ENGINE_URL}/oauth/session?address=${userAddress}`,\n      {\n        method: 'GET',\n        credentials: 'include',\n      }\n    );\n    if (resWithCreds && resWithCreds.ok) {\n      let json = await resWithCreds.json();\n\n      // Set access token if exists\n      if (json.access_token) {\n        setToken(json);\n      } else if (json.message) {\n        // Or set auth message\n        setMessage(json.message);\n      }\n    } else {\n      console.error(\n        'startSessionWithCreds error',\n        (resWithCreds && resWithCreds.status) || 'Unknown error'\n      );\n    }\n  };\n\n  // Sign authentication message with MetaMask\n  const signMessage = async (lib: any, msg: string, userAccount: string) => {\n    if (!web3Modal) return;\n    try {\n      const newSignature = await lib.provider.request({\n        method: 'personal_sign',\n        params: [msg, userAccount],\n      });\n      setSignature(newSignature);\n    } catch (error) {\n      console.error('signMessage error', error);\n      clearUserState();\n    }\n  };\n\n  // Get access token from the engine API\n  const getToken = async (code: string, blockchain?: string) => {\n    const res = await fetch(`${ENGINE_URL}/oauth/token?code=${code}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        grant_type: 'authorization_code',\n      }),\n    });\n\n    if (res.ok) {\n      let result = await res.json();\n      if (blockchain && blockchain === 'flow') {\n        setAddress((flowUser && flowUser.addr) || null);\n        setChain('flow:mainnet');\n      }\n      setToken(result);\n    } else {\n      console.error('getToken error', res.status);\n      clearUserState();\n    }\n  };\n\n  // Set refresh_token cookie\n  const registerAuthSession = async (refresh_token: string) => {\n    const res = await fetch(`${ENGINE_URL}/oauth/session-register`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        refresh_token: refresh_token,\n      }),\n    });\n\n    if (!res.ok) {\n      console.error('registerAuthSession error', res.status);\n    }\n  };\n\n  // Remove refresh_token cookie\n  const clearAuthSession = async () => {\n    const res = await fetch(`${ENGINE_URL}/oauth/session-register`, {\n      method: 'POST',\n      credentials: 'include',\n    });\n\n    if (!res.ok) {\n      console.error('clearAuthSession error', res.status);\n    }\n  };\n\n  // Set web3Modal instance\n  useEffect(() => {\n    const providerOptions = {};\n    const newWeb3Modal = new Web3Modal({\n      cacheProvider: cacheProvider,\n      network: 'mainnet',\n      providerOptions,\n    });\n    setWeb3Modal(newWeb3Modal);\n  }, []);\n\n  // connect automatically and without a popup if user was connected before\n  useEffect(() => {\n    if (web3Modal && web3Modal.cachedProvider) {\n      connect();\n    }\n  }, [web3Modal]);\n\n  // set user if token and address is known\n  useEffect(() => {\n    if (address && token && token.access_token && chain) {\n      setUser(`${chain}:${address}`);\n      if (token.refresh_token) {\n        registerAuthSession(token.refresh_token);\n      }\n    } else {\n      setUser(null);\n    }\n  }, [token, address, chain]);\n\n  // Start session if user address is known\n  useEffect(() => {\n    if (address && !message && !signature && !token) {\n      startSession(address);\n    }\n  }, [address, message, signature, token]);\n\n  // Sign authentication message if message is known\n  useEffect(() => {\n    if (library && message && account && !signature && !token) {\n      signMessage(library, message, account);\n    }\n  }, [library, message, account, signature, token]);\n\n  // Get authentication token if message is signed\n  useEffect(() => {\n    if (code && !token) {\n      getToken(code);\n    }\n  }, [code, token]);\n\n  // subscribe to flow user update\n  useEffect(() => {\n    fcl.currentUser.subscribe(setFlowUser);\n  }, []);\n\n  // Get authentication token if flow user is proofed\n  useEffect(() => {\n    if (\n      flowUser &&\n      flowUser.addr &&\n      flowUser.services?.find(service => service.type === 'account-proof')\n    ) {\n      const proof = flowUser.services?.find(\n        service => service.type === 'account-proof'\n      );\n      if (\n        proof &&\n        proof.data &&\n        proof.data.nonce &&\n        proof.data.signatures &&\n        proof.data.signatures.length > 0 &&\n        proof.data.address\n      ) {\n        const code = encode(\n          JSON.stringify({\n            type: 'flow',\n            address: proof.data.address,\n            nonce: proof.data.nonce,\n            signatures: proof.data.signatures,\n          })\n        );\n        getToken(code, 'flow');\n      }\n    }\n  }, [flowUser]);\n\n  return (\n    <GrinderyNexusContext.Provider\n      value={{\n        user,\n        address,\n        chain,\n        token,\n        code,\n        flowUser,\n        connect,\n        disconnect,\n        setUser,\n        setAddress,\n        setChain,\n        connectFlow,\n      }}\n    >\n      {children}\n    </GrinderyNexusContext.Provider>\n  );\n};\n\n/** Grindery Nexus Hook */\nexport const useGrinderyNexus = () => useContext(GrinderyNexusContext);\n\nexport default GrinderyNexusContextProvider;\n"],"names":["ENGINE_URL","fcl","flow.network","discovery.wallet","app.detail.title","app.detail.icon","fcl.accountProof.resolver","_context","fetch","method","credentials","resWithCreds","ok","json","nonce","appIdentifier","Error","console","error","status","GrinderyNexusContext","createContext","user","address","chain","token","code","flowUser","addr","connect","disconnect","setUser","setAddress","setChain","connectFlow","GrinderyNexusContextProvider","props","children","cacheProvider","useState","web3Modal","setWeb3Modal","library","setLibrary","account","setAccount","message","setMessage","setToken","signature","setSignature","setFlowUser","encode","JSON","stringify","addListeners","web3ModalProvider","on","window","location","reload","_context2","clearCachedProvider","_context4","provider","ethersProvider","providers","Web3Provider","getSigner","getAddress","userAddress","listAccounts","accounts","clearUserState","_context5","clearAuthSession","startSession","_context6","access_token","signMessage","lib","msg","userAccount","_context7","request","params","getToken","blockchain","_context8","headers","Content-Type","body","grant_type","res","result","registerAuthSession","refresh_token","_context9","_context10","useEffect","newWeb3Modal","Web3Modal","network","providerOptions","cachedProvider","subscribe","services","_flowUser$services","find","service","type","proof","_flowUser$services2","data","signatures","length","React","Provider","value","useContext"],"mappings":"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"}