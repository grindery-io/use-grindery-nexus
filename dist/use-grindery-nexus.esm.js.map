{"version":3,"file":"use-grindery-nexus.esm.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from 'react';\n// @ts-ignore\nimport Web3Modal from 'web3modal';\n// @ts-ignore\nimport * as ethersLib from 'ethers';\n// @ts-ignore\nimport { encode } from 'universal-base64url';\n// @ts-ignore\nimport * as fcl from '@onflow/fcl';\n\nexport const ENGINE_URL = 'https://orchestrator.grindery.org';\n\ndeclare global {\n  interface Window {\n    nexus_auth: any;\n  }\n}\n\n// Flow authentication account proof data type\ntype AccountProofData = {\n  // e.g. \"Awesome App (v0.0)\" - A human readable string to identify your application during signing\n  appIdentifier: string;\n\n  // e.g. \"75f8587e5bd5f9dcc9909d0dae1f0ac5814458b2ae129620502cb936fde7120a\" - minimum 32-byte random nonce as hex string\n  nonce: string;\n};\n\n// Flow auth account proof data resolver type\ntype AccountProofDataResolver = () => Promise<AccountProofData | null>;\n\n// Flow auth config\nfcl.config({\n  'flow.network': 'mainnet',\n  'discovery.wallet': 'https://fcl-discovery.onflow.org/authn',\n  'app.detail.title': 'Grindery Nexus',\n  'app.detail.icon':\n    'https://nexus.grindery.org/static/media/nexus-square.7402bdeb27ab56504250ca409fac38bd.svg',\n});\n\n// Authentication token object definition\nexport type AuthToken = {\n  access_token: string;\n  expires_in: number;\n  refresh_token: string;\n  token_type: string;\n};\n\n// Flow user type\ntype FlowUser = {\n  addr: string;\n  services?: any[];\n};\n\n// Context properties definition\nexport type GrinderyNexusContextProps = {\n  /** User ID. Reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md */\n  user: string | null;\n\n  /** Authentication token object */\n  token: AuthToken | null;\n\n  /** User wallet address  */\n  address: string | null;\n\n  /** User chain id  */\n  chain: number | string | null;\n\n  /** Authorization code */\n  code: string | null;\n\n  /** Flow user object */\n  flowUser: FlowUser;\n\n  /** Ethers provider */\n  provider: any;\n\n  /** Ethers */\n  ethers: any;\n\n  /** Blockchains name */\n  chainName: string | null | number;\n\n  /** Connect user wallet */\n  connect: () => void;\n\n  /** Disconnect user wallet */\n  disconnect: () => void;\n\n  /** Set User ID  */\n  setUser: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user wallet address  */\n  setAddress: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user chain id  */\n  setChain: React.Dispatch<React.SetStateAction<number | string | null>>;\n\n  /** Connect flow user */\n  connectFlow: () => void;\n};\n\nexport type GrinderyNexusContextProviderProps = {\n  children: React.ReactNode;\n\n  /** Automatically authenticate user */\n  cacheProvider?: boolean;\n};\n\n// Default context properties\nconst defaultContext = {\n  user: null,\n  address: null,\n  chain: null,\n  token: null,\n  code: null,\n  flowUser: { addr: '' },\n  provider: null,\n  ethers: null,\n  chainName: null,\n  connect: () => {},\n  disconnect: () => {},\n  setUser: () => {},\n  setAddress: () => {},\n  setChain: () => {},\n  connectFlow: () => {},\n};\n\n/** Grindery Nexus Context */\nexport const GrinderyNexusContext = createContext<GrinderyNexusContextProps>(\n  defaultContext\n);\n\n/** Grindery Nexus Context Provider */\nexport const GrinderyNexusContextProvider = (\n  props: GrinderyNexusContextProviderProps\n) => {\n  const children = props.children;\n  const cacheProvider =\n    typeof props.cacheProvider !== 'undefined' ? props.cacheProvider : true;\n\n  // Web3Modal instance\n  const [web3Modal, setWeb3Modal] = useState<any>(null);\n\n  // Web3Provider library\n  const [library, setLibrary] = useState<any>(null);\n\n  // User account\n  const [account, setAccount] = useState<string | null>(null);\n\n  // User id\n  const [user, setUser] = useState<string | null>(null);\n\n  // User wallet address\n  const [address, setAddress] = useState<string | null>(null);\n\n  // User chain id\n  const [chain, setChain] = useState<number | string | null>(null);\n\n  // Auth message\n  const [message, setMessage] = useState<string | null>(null);\n\n  // Authentication token object\n  const [token, setToken] = useState<AuthToken | null>(null);\n\n  // Signed authentication message\n  const [signature, setSignature] = useState<string | null>(null);\n\n  // Flow chain user\n  const [flowUser, setFlowUser] = useState<FlowUser>({ addr: '' });\n\n  // Is Flow account resolver called\n  const [resolverCalled, setResolverCalled] = useState(false);\n\n  // Chains list\n  const [chains, setChains] = useState<any[]>([]);\n\n  const chainName =\n    chains.find(c => c.value && c.value === chain)?.label || chain;\n\n  const provider = library;\n\n  const ethers = ethersLib;\n\n  const flowProof =\n    flowUser &&\n    flowUser.addr &&\n    flowUser.services?.find(service => service.type === 'account-proof');\n\n  // Compiled authorization code\n  const code =\n    (message &&\n      signature &&\n      encode(\n        JSON.stringify({\n          message: message,\n          signature: signature,\n        })\n      )) ||\n    (flowProof &&\n      flowProof.data &&\n      flowProof.data.nonce &&\n      flowProof.data.signatures &&\n      flowProof.data.signatures.length > 0 &&\n      flowProof.data.address &&\n      resolverCalled &&\n      encode(\n        JSON.stringify({\n          type: 'flow',\n          address: flowProof.data.address,\n          nonce: flowProof.data.nonce,\n          signatures: flowProof.data.signatures,\n        })\n      )) ||\n    null;\n\n  // Subscribe to changes\n  const addListeners = async (web3ModalProvider: any) => {\n    // Subscribe to accounts change\n    web3ModalProvider.on('accountsChanged', () => {\n      window.location.reload();\n    });\n\n    // Subscribe to provider disconnection\n    web3ModalProvider.on('disconnect', async () => {\n      await web3Modal.clearCachedProvider();\n      disconnect();\n    });\n\n    // Subscribe to chainId change\n    web3ModalProvider.on('chainChanged', (chainId: string) => {\n      setChain(`eip155:${parseInt(chainId, 16)}`);\n    });\n  };\n\n  // Connect MetaMask wallet\n  const connect = async () => {\n    const provider = await web3Modal.connect();\n    addListeners(provider);\n    const ethersProvider = new ethersLib.providers.Web3Provider(\n      provider,\n      'any'\n    );\n    const userAddress = await ethersProvider.getSigner().getAddress();\n    const userChain = await ethersProvider.getSigner().getChainId();\n    const accounts = await ethersProvider.listAccounts();\n    setLibrary(ethersProvider);\n    if (accounts) setAccount(accounts[0]);\n    setAddress(userAddress);\n    // For EVM wallet always set Ethereum chain\n    setChain(`eip155:${userChain}`);\n  };\n\n  // Connect with Flow wallet\n  const connectFlow = () => {\n    fcl.authenticate();\n  };\n\n  // Clear user state\n  const clearUserState = () => {\n    setUser(null);\n    setAddress(null);\n    setChain(null);\n    setAccount(null);\n    setMessage(null);\n    setToken(null);\n    setSignature(null);\n    setFlowUser({ addr: '' });\n  };\n\n  // Disconnect user\n  const disconnect = async () => {\n    await web3Modal.clearCachedProvider();\n    if (flowUser && flowUser.addr) {\n      fcl.unauthenticate();\n    }\n    clearUserState();\n    clearAuthSession();\n  };\n\n  // Fetch authentication message or access token from the engine API\n  const startSession = async (userAddress: string) => {\n    // Try to fetch access token\n    const resWithCreds = await fetch(\n      `${ENGINE_URL}/oauth/session?address=${userAddress}`,\n      {\n        method: 'GET',\n        credentials: 'include',\n      }\n    );\n    if (resWithCreds && resWithCreds.ok) {\n      let json = await resWithCreds.json();\n\n      // Set access token if exists\n      if (json.access_token) {\n        setToken(json);\n      } else if (json.message) {\n        // Or set auth message\n        setMessage(json.message);\n      }\n    } else {\n      console.error(\n        'startSessionWithCreds error',\n        (resWithCreds && resWithCreds.status) || 'Unknown error'\n      );\n    }\n  };\n\n  // Sign authentication message with MetaMask\n  const signMessage = async (lib: any, msg: string, userAccount: string) => {\n    if (!web3Modal) return;\n    try {\n      const newSignature = await lib.provider.request({\n        method: 'personal_sign',\n        params: [msg, userAccount],\n      });\n      setSignature(newSignature);\n    } catch (error) {\n      console.error('signMessage error', error);\n      clearUserState();\n    }\n  };\n\n  // Get access token from the engine API\n  const getToken = async (code: string) => {\n    const res = await fetch(`${ENGINE_URL}/oauth/token`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        grant_type: 'authorization_code',\n        code: code,\n      }),\n    });\n\n    if (res.ok) {\n      let result = await res.json();\n      // Set address and chain if Flow user proofed\n      if (flowProof) {\n        setAddress((flowUser && flowUser.addr) || null);\n        setChain('flow:mainnet');\n      }\n      setToken(result);\n    } else {\n      console.error('getToken error', res.status);\n      // handle expried nonce for Flow user\n      if (flowProof) {\n        try {\n          await disconnect();\n        } catch (err) {\n          //\n        }\n        fcl.authenticate();\n      } else {\n        clearUserState();\n        disconnect();\n      }\n    }\n  };\n\n  // Set refresh_token cookie\n  const registerAuthSession = async (refresh_token: string) => {\n    const res = await fetch(`${ENGINE_URL}/oauth/session-register`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        refresh_token: refresh_token,\n      }),\n    });\n\n    if (!res.ok) {\n      console.error('registerAuthSession error', res.status);\n    }\n  };\n\n  // Remove refresh_token cookie\n  const clearAuthSession = async () => {\n    const res = await fetch(`${ENGINE_URL}/oauth/session-register`, {\n      method: 'POST',\n      credentials: 'include',\n    });\n\n    if (!res.ok) {\n      console.error('clearAuthSession error', res.status);\n    }\n  };\n\n  // Flow auth account proof data resolver\n  const accountProofDataResolver: AccountProofDataResolver = async () => {\n    setResolverCalled(true);\n\n    const res = await fetch(`${ENGINE_URL}/oauth/flow/session`, {\n      method: 'GET',\n      credentials: 'include',\n    });\n\n    if (res && res.ok) {\n      let json = await res.json();\n\n      // Return nonce on success\n      if (json.nonce) {\n        return {\n          appIdentifier: 'Grindery Nexus',\n          nonce: json.nonce,\n        };\n      } else {\n        throw new Error('get nonce failed');\n      }\n    } else {\n      console.error(\n        'getFlowNonce error',\n        (res && res.status) || 'Unknown error'\n      );\n      throw new Error('get nonce failed');\n    }\n  };\n\n  const restoreFlowSession = async (address: string) => {\n    const res = await fetch(\n      `${ENGINE_URL}/oauth/flow/session?address=${address}`,\n      {\n        method: 'GET',\n        credentials: 'include',\n      }\n    );\n\n    if (res && res.ok) {\n      let json = await res.json();\n\n      // Return nonce on success\n      if (json.access_token) {\n        setToken(json);\n        setAddress(address);\n        setChain('flow:mainnet');\n      } else {\n        throw new Error('flow user session failed');\n      }\n    } else {\n      console.error(\n        'flow user session failed',\n        (res && res.status) || 'Unknown error'\n      );\n      throw new Error('flow user session failed');\n    }\n  };\n\n  const getChains = () => {\n    fetch('https://cds.grindery.org/chains/evm.json')\n      .then(response => response.json())\n      .then(data => {\n        setChains(data);\n      });\n  };\n\n  useEffect(() => {\n    fcl.config().put('fcl.accountProof.resolver', accountProofDataResolver);\n  }, []);\n\n  // Set web3Modal instance\n  useEffect(() => {\n    const providerOptions = {};\n    const newWeb3Modal = new Web3Modal({\n      cacheProvider: cacheProvider,\n      network: 'mainnet',\n      providerOptions,\n    });\n    setWeb3Modal(newWeb3Modal);\n  }, []);\n\n  // connect automatically and without a popup if user was connected before\n  useEffect(() => {\n    if (web3Modal && web3Modal.cachedProvider) {\n      connect();\n    }\n  }, [web3Modal]);\n\n  // set user if token and address is known\n  useEffect(() => {\n    if (address && token && token.access_token) {\n      setUser(`eip155:1:${address}`);\n      if (token.refresh_token) {\n        registerAuthSession(token.refresh_token);\n      }\n    } else {\n      setUser(null);\n    }\n  }, [token, address]);\n\n  // Start session if user address is known\n  useEffect(() => {\n    if (address && !message && !signature && !token) {\n      startSession(address);\n    }\n  }, [address, message, signature, token]);\n\n  // Sign authentication message if message is known\n  useEffect(() => {\n    if (library && message && account && !signature && !token) {\n      signMessage(library, message, account);\n    }\n  }, [library, message, account, signature, token]);\n\n  // Get authentication token if message is signed\n  useEffect(() => {\n    if (code && !token) {\n      getToken(code);\n    }\n  }, [code, token]);\n\n  // subscribe to flow user update\n  useEffect(() => {\n    fcl.currentUser.subscribe(setFlowUser);\n  }, []);\n\n  // Restore Flow user session if user available without resolver\n  useEffect(() => {\n    if (flowUser && flowUser.addr && !resolverCalled) {\n      restoreFlowSession(flowUser.addr);\n    }\n  }, [flowUser, resolverCalled]);\n\n  useEffect(() => {\n    getChains();\n  }, []);\n\n  useEffect(() => {\n    window.nexus_auth = {\n      user,\n      address,\n      chain,\n      chainName,\n      message,\n      token,\n      flowUser,\n    };\n  }, [user, address, chain, message, token, flowUser, chainName]);\n\n  return (\n    <GrinderyNexusContext.Provider\n      value={{\n        user,\n        address,\n        chain,\n        token,\n        code,\n        flowUser,\n        provider,\n        ethers,\n        chainName,\n        connect,\n        disconnect,\n        setUser,\n        setAddress,\n        setChain,\n        connectFlow,\n      }}\n    >\n      {children}\n    </GrinderyNexusContext.Provider>\n  );\n};\n\n/** Grindery Nexus Hook */\nexport const useGrinderyNexus = () => useContext(GrinderyNexusContext);\n\nexport default GrinderyNexusContextProvider;\n"],"names":["ENGINE_URL","fcl","defaultContext","user","address","chain","token","code","flowUser","addr","provider","ethers","chainName","connect","disconnect","setUser","setAddress","setChain","connectFlow","GrinderyNexusContext","createContext","GrinderyNexusContextProvider","props","children","cacheProvider","useState","web3Modal","setWeb3Modal","library","setLibrary","account","setAccount","message","setMessage","setToken","signature","setSignature","setFlowUser","resolverCalled","setResolverCalled","chains","setChains","find","c","value","label","ethersLib","flowProof","services","service","type","encode","JSON","stringify","data","nonce","signatures","length","addListeners","web3ModalProvider","on","window","location","reload","clearCachedProvider","chainId","parseInt","ethersProvider","Web3Provider","getSigner","getAddress","userAddress","getChainId","userChain","listAccounts","accounts","clearUserState","clearAuthSession","startSession","fetch","method","credentials","resWithCreds","ok","json","access_token","console","error","status","signMessage","lib","msg","userAccount","request","params","newSignature","getToken","headers","body","grant_type","res","result","registerAuthSession","refresh_token","accountProofDataResolver","appIdentifier","Error","restoreFlowSession","getChains","then","response","useEffect","put","providerOptions","newWeb3Modal","Web3Modal","network","cachedProvider","subscribe","nexus_auth","React","Provider","useGrinderyNexus","useContext"],"mappings":"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"}