{"version":3,"file":"use-grindery-nexus.esm.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from 'react';\n// @ts-ignore\nimport Web3Modal from 'web3modal';\n// @ts-ignore\nimport { providers } from 'ethers';\n// @ts-ignore\nimport { encode } from 'universal-base64url';\n// @ts-ignore\nimport * as fcl from '@onflow/fcl';\n\nexport const ENGINE_URL = 'https://orchestrator.grindery.org';\n\n// Flow authentication account proof data type\ntype AccountProofData = {\n  // e.g. \"Awesome App (v0.0)\" - A human readable string to identify your application during signing\n  appIdentifier: string;\n\n  // e.g. \"75f8587e5bd5f9dcc9909d0dae1f0ac5814458b2ae129620502cb936fde7120a\" - minimum 32-byte random nonce as hex string\n  nonce: string;\n};\n\n// Flow auth account proof data resolver type\ntype AccountProofDataResolver = () => Promise<AccountProofData | null>;\n\n// Flow auth account proof data resolver\nconst accountProofDataResolver: AccountProofDataResolver = async () => {\n  const resWithCreds = await fetch(`${ENGINE_URL}/oauth/flow-get-nonce`, {\n    method: 'GET',\n    credentials: 'include',\n  });\n\n  if (resWithCreds && resWithCreds.ok) {\n    let json = await resWithCreds.json();\n\n    // Set access token if exists\n    if (json.nonce) {\n      return {\n        appIdentifier: 'Grindery Nexus',\n        nonce: json.nonce,\n      };\n    } else {\n      throw new Error('get nonce failed');\n    }\n  } else {\n    console.error(\n      'getFlowNonce error',\n      (resWithCreds && resWithCreds.status) || 'Unknown error'\n    );\n    throw new Error('get nonce failed');\n  }\n};\n\n// Flow auth config\nfcl.config({\n  'flow.network': 'mainnet',\n  //\"accessNode.api\": \"http://rest-mainnet.onflow.org\",\n  'discovery.wallet': 'https://fcl-discovery.onflow.org/testnet/authn',\n  //\"discovery.authn.endpoint\": \"https://fcl-discovery.onflow.org/api/mainnet/authn\",\n  //\"discovery.authn.include\": [\"0x82ec283f88a62e65\", \"0x9d2e44203cb13051\"], // Service account address\n  'app.detail.title': 'Grindery Nexus',\n  'app.detail.icon':\n    'https://nexus.grindery.org/static/media/nexus-square.7402bdeb27ab56504250ca409fac38bd.svg',\n  'fcl.accountProof.resolver': accountProofDataResolver,\n});\n\n// Authentication token object definition\nexport type AuthToken = {\n  access_token: string;\n  expires_in: number;\n  refresh_token: string;\n  token_type: string;\n};\n\n// Flow user type\ntype FlowUser = {\n  addr: string;\n  services?: any[];\n};\n\n// Context properties definition\nexport type GrinderyNexusContextProps = {\n  /** User ID. Reference: https://github.com/ChainAgnostic/CAIPs/blob/master/CAIPs/caip-10.md */\n  user: string | null;\n\n  /** Authentication token object */\n  token: AuthToken | null;\n\n  /** User wallet address  */\n  address: string | null;\n\n  /** User chain id  */\n  chain: number | string | null;\n\n  /** Authorization code */\n  code: string | null;\n\n  /** Flow user object */\n  flowUser: FlowUser;\n\n  /** Connect user wallet */\n  connect: () => void;\n\n  /** Disconnect user wallet */\n  disconnect: () => void;\n\n  /** Set User ID  */\n  setUser: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user wallet address  */\n  setAddress: React.Dispatch<React.SetStateAction<string | null>>;\n\n  /** Set user chain id  */\n  setChain: React.Dispatch<React.SetStateAction<number | string | null>>;\n\n  /** Connect flow user */\n  connectFlow: () => void;\n};\n\nexport type GrinderyNexusContextProviderProps = {\n  children: React.ReactNode;\n\n  /** Automatically authenticate user */\n  cacheProvider?: boolean;\n};\n\n// Default context properties\nconst defaultContext = {\n  user: null,\n  address: null,\n  chain: null,\n  token: null,\n  code: null,\n  flowUser: { addr: '' },\n  connect: () => {},\n  disconnect: () => {},\n  setUser: () => {},\n  setAddress: () => {},\n  setChain: () => {},\n  connectFlow: () => {},\n};\n\n/** Grindery Nexus Context */\nexport const GrinderyNexusContext = createContext<GrinderyNexusContextProps>(\n  defaultContext\n);\n\n/** Grindery Nexus Context Provider */\nexport const GrinderyNexusContextProvider = (\n  props: GrinderyNexusContextProviderProps\n) => {\n  const children = props.children;\n  const cacheProvider =\n    typeof props.cacheProvider !== 'undefined' ? props.cacheProvider : true;\n\n  // Web3Modal instance\n  const [web3Modal, setWeb3Modal] = useState<any>(null);\n\n  // Web3Provider library\n  const [library, setLibrary] = useState<any>(null);\n\n  // User account\n  const [account, setAccount] = useState<string | null>(null);\n\n  // User id\n  const [user, setUser] = useState<string | null>(null);\n\n  // User wallet address\n  const [address, setAddress] = useState<string | null>(null);\n\n  // User chain id\n  const [chain, setChain] = useState<number | string | null>(null);\n\n  // Auth message\n  const [message, setMessage] = useState<string | null>(null);\n\n  // Authentication token object\n  const [token, setToken] = useState<AuthToken | null>(null);\n\n  // Signed authentication message\n  const [signature, setSignature] = useState<string | null>(null);\n\n  // Flow chain user\n  const [flowUser, setFlowUser] = useState<FlowUser>({ addr: '' });\n\n  // Compiled authorization code\n  const code =\n    (message &&\n      signature &&\n      encode(\n        JSON.stringify({\n          message: message,\n          signature: signature,\n        })\n      )) ||\n    null;\n\n  // Subscribe to account change\n  const addListeners = async (web3ModalProvider: any) => {\n    web3ModalProvider.on('accountsChanged', () => {\n      window.location.reload();\n    });\n\n    web3ModalProvider.on('disconnect', async () => {\n      await web3Modal.clearCachedProvider();\n      disconnect();\n    });\n  };\n\n  // Connect MetaMask wallet\n  const connect = async () => {\n    const provider = await web3Modal.connect();\n    addListeners(provider);\n    const ethersProvider = new providers.Web3Provider(provider);\n    const userAddress = await ethersProvider.getSigner().getAddress();\n    //const userChain = await ethersProvider.getSigner().getChainId();\n    const accounts = await ethersProvider.listAccounts();\n    setLibrary(ethersProvider);\n    if (accounts) setAccount(accounts[0]);\n    setAddress(userAddress);\n    setChain('eip155:1');\n  };\n\n  // Connect with Flow wallet\n  const connectFlow = () => {\n    fcl.authenticate();\n  };\n\n  // Clear user state\n  const clearUserState = () => {\n    setUser(null);\n    setAddress(null);\n    setChain(null);\n    setAccount(null);\n    setMessage(null);\n    setToken(null);\n    setSignature(null);\n  };\n\n  // Disconnect user\n  const disconnect = async () => {\n    await web3Modal.clearCachedProvider();\n    clearUserState();\n    clearAuthSession();\n    if (flowUser) {\n      fcl.unauthenticate();\n    }\n  };\n\n  // Fetch authentication message or access token from the engine API\n  const startSession = async (userAddress: string) => {\n    // Try to fetch access token\n    const resWithCreds = await fetch(\n      `${ENGINE_URL}/oauth/session?address=${userAddress}`,\n      {\n        method: 'GET',\n        credentials: 'include',\n      }\n    );\n    if (resWithCreds && resWithCreds.ok) {\n      let json = await resWithCreds.json();\n\n      // Set access token if exists\n      if (json.access_token) {\n        setToken(json);\n      } else if (json.message) {\n        // Or set auth message\n        setMessage(json.message);\n      }\n    } else {\n      console.error(\n        'startSessionWithCreds error',\n        (resWithCreds && resWithCreds.status) || 'Unknown error'\n      );\n    }\n  };\n\n  // Sign authentication message with MetaMask\n  const signMessage = async (lib: any, msg: string, userAccount: string) => {\n    if (!web3Modal) return;\n    try {\n      const newSignature = await lib.provider.request({\n        method: 'personal_sign',\n        params: [msg, userAccount],\n      });\n      setSignature(newSignature);\n    } catch (error) {\n      console.error('signMessage error', error);\n      clearUserState();\n    }\n  };\n\n  // Get access token from the engine API\n  const getToken = async (code: string, blockchain?: string) => {\n    const res = await fetch(`${ENGINE_URL}/oauth/token?code=${code}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        grant_type: 'authorization_code',\n      }),\n    });\n\n    if (res.ok) {\n      let result = await res.json();\n      if (blockchain && blockchain === 'flow') {\n        setAddress((flowUser && flowUser.addr) || null);\n        setChain('flow:mainnet');\n      }\n      setToken(result);\n    } else {\n      console.error('getToken error', res.status);\n      clearUserState();\n    }\n  };\n\n  // Set refresh_token cookie\n  const registerAuthSession = async (refresh_token: string) => {\n    const res = await fetch(`${ENGINE_URL}/oauth/session-register`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        refresh_token: refresh_token,\n      }),\n    });\n\n    if (!res.ok) {\n      console.error('registerAuthSession error', res.status);\n    }\n  };\n\n  // Remove refresh_token cookie\n  const clearAuthSession = async () => {\n    const res = await fetch(`${ENGINE_URL}/oauth/session-register`, {\n      method: 'POST',\n      credentials: 'include',\n    });\n\n    if (!res.ok) {\n      console.error('clearAuthSession error', res.status);\n    }\n  };\n\n  // Set web3Modal instance\n  useEffect(() => {\n    const providerOptions = {};\n    const newWeb3Modal = new Web3Modal({\n      cacheProvider: cacheProvider,\n      network: 'mainnet',\n      providerOptions,\n    });\n    setWeb3Modal(newWeb3Modal);\n  }, []);\n\n  // connect automatically and without a popup if user was connected before\n  useEffect(() => {\n    if (web3Modal && web3Modal.cachedProvider) {\n      connect();\n    }\n  }, [web3Modal]);\n\n  // set user if token and address is known\n  useEffect(() => {\n    if (address && token && token.access_token && chain) {\n      setUser(`${chain}:${address}`);\n      if (token.refresh_token) {\n        registerAuthSession(token.refresh_token);\n      }\n    } else {\n      setUser(null);\n    }\n  }, [token, address, chain]);\n\n  // Start session if user address is known\n  useEffect(() => {\n    if (address && !message && !signature && !token) {\n      startSession(address);\n    }\n  }, [address, message, signature, token]);\n\n  // Sign authentication message if message is known\n  useEffect(() => {\n    if (library && message && account && !signature && !token) {\n      signMessage(library, message, account);\n    }\n  }, [library, message, account, signature, token]);\n\n  // Get authentication token if message is signed\n  useEffect(() => {\n    if (code && !token) {\n      getToken(code);\n    }\n  }, [code, token]);\n\n  // subscribe to flow user update\n  useEffect(() => {\n    fcl.currentUser.subscribe(setFlowUser);\n  }, []);\n\n  // Get authentication token if flow user is proofed\n  useEffect(() => {\n    if (\n      flowUser &&\n      flowUser.addr &&\n      flowUser.services?.find(service => service.type === 'account-proof')\n    ) {\n      const proof = flowUser.services?.find(\n        service => service.type === 'account-proof'\n      );\n      if (\n        proof &&\n        proof.data &&\n        proof.data.nonce &&\n        proof.data.signatures &&\n        proof.data.signatures.length > 0 &&\n        proof.data.address\n      ) {\n        const code = encode(\n          JSON.stringify({\n            type: 'flow',\n            address: proof.data.address,\n            nonce: proof.data.nonce,\n            signatures: proof.data.signatures,\n          })\n        );\n        getToken(code, 'flow');\n      }\n    }\n  }, [flowUser]);\n\n  return (\n    <GrinderyNexusContext.Provider\n      value={{\n        user,\n        address,\n        chain,\n        token,\n        code,\n        flowUser,\n        connect,\n        disconnect,\n        setUser,\n        setAddress,\n        setChain,\n        connectFlow,\n      }}\n    >\n      {children}\n    </GrinderyNexusContext.Provider>\n  );\n};\n\n/** Grindery Nexus Hook */\nexport const useGrinderyNexus = () => useContext(GrinderyNexusContext);\n\nexport default GrinderyNexusContextProvider;\n"],"names":["ENGINE_URL","accountProofDataResolver","fetch","method","credentials","resWithCreds","ok","json","nonce","appIdentifier","Error","console","error","status","fcl","defaultContext","user","address","chain","token","code","flowUser","addr","connect","disconnect","setUser","setAddress","setChain","connectFlow","GrinderyNexusContext","createContext","GrinderyNexusContextProvider","props","children","cacheProvider","useState","web3Modal","setWeb3Modal","library","setLibrary","account","setAccount","message","setMessage","setToken","signature","setSignature","setFlowUser","encode","JSON","stringify","addListeners","web3ModalProvider","on","window","location","reload","clearCachedProvider","provider","ethersProvider","providers","Web3Provider","getSigner","getAddress","userAddress","listAccounts","accounts","clearUserState","clearAuthSession","startSession","access_token","signMessage","lib","msg","userAccount","request","params","newSignature","getToken","blockchain","headers","body","grant_type","res","result","registerAuthSession","refresh_token","useEffect","providerOptions","newWeb3Modal","Web3Modal","network","cachedProvider","subscribe","services","find","service","type","proof","data","signatures","length","React","Provider","value","useGrinderyNexus","useContext"],"mappings":"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"}